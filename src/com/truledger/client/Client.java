package com.truledger.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.KeyPair;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;

import android.content.Context;
import android.net.http.AndroidHttpClient;

/**
 * A Truledger client API. Talks the protocol of truledger.com
 * @author billstclair
 */
public class Client {
	Context ctx;
	ClientDB db;
	Parser parser;
	ClientDB.PubkeyDB pubkeydb;
	
	// Initialized by login() and newuser()
	String id;
	KeyPair privkey;
	String pubkeystr;
	
	// Initialized by setserver() and addserver()
	ServerProxy server;
	String serverid;
	
	// Set true by getreq()
	boolean isSyncedreq;
	
	// The last coupon generaget by a spend:
	// (<serverid>,couponenvelope,<id>,<encrypted-coupon>)
	String coupon;
	
	// The last outbox time generated by a spend
	String lastSpendTime;
	
	// Set true to keep history of spend and processinbox
	boolean keepHistory;
	
	// Set during call of process() when a T.REQ is included.
	// Updated by updateMsgReqNumbers() when a new crypto session
	// is created, invalidating the original T.REQ value.
	// Called *msg* in the lisp code
	String processMsg;
	
	/**
	 * Constructor
	 * @param ctx The context from the main activity. Needed for the database.
	 */
	public Client(Context ctx) {
		this.ctx = ctx;
		db = new ClientDB(ctx);
		pubkeydb = db.getPubkeyDB();
		parser = new Parser(pubkeydb);
		parser.setAlwaysVerifySigs(true);
	}
	
	// API methods
	
	/**
	 * Close the server connection and the databases
	 */
	public void close() {
		this.logout();
		if (db != null) {
			db.close();
			db = null;
		}
	}
	
	public Parser getParser() {
		return parser;
	}
	
	public ClientDB getDB() {
		return db;
	}
	
	public void newuser(String passphrase, KeyPair privkey) throws ClientException {
		this.newuser(passphrase, privkey, true);
	}
	
	public void newuser(String passphrase, int keysize) throws ClientException {
		if (db.getPrivkeyDB().get(passphrase)!=null) {
			throw new ClientException("Passphrase already has an associated private key");
		}
		KeyPair privkey = Crypto.RSAGenerateKey(keysize);
		newuser(passphrase, privkey, false);
	}
	
	// API methods 

	/**
	 * Create a new user with the given passphrase, error if already there.
	 * If privkey is a string, use that as the private key.
	 * If it is an integer, default 3072, create a new private key with that many bits
	 * User is logged in when this returns successfully."
	 */
	public void newuser(String passphrase, KeyPair privkey, boolean checkPassphrase) throws ClientException {
		String hash = passphraseHash(passphrase);
		this.logout();
		ClientDB.PrivkeyDB privkeydb = db.getPrivkeyDB();

		if (checkPassphrase && privkeydb.get(passphrase)!=null) {
			throw new ClientException("Passphrase already has an associated private key");
		}

		String pubstr, id, privstr;
		try {
			pubstr = Crypto.encodeRSAPublicKey(privkey);
			id = Crypto.getKeyID(pubstr);
			privstr = Crypto.encodeRSAPrivateKey(privkey, passphrase);
		} catch (IOException e) {
			throw new ClientException("While encoding public key for new private key", e);
		}
		
		privkeydb.put(hash,  privstr);
		this.id = id;
		this.privkey = privkey;
		try {
			this.pubkeystr = Crypto.encodeRSAPublicKey(privkey);
		} catch (IOException e) {
			throw new ClientException(e);
		}
	}
	
	/**
	 * Look up the private key for a passphrase
	 * @param passphrase
	 * @return The private key
	 * @throws ClientException If no private key is known for passphrase or if we fail to decrypt the string for it
	 */
	public KeyPair getPrivkey(String passphrase) throws ClientException {
		String hash = passphraseHash(passphrase);
		String privstr = db.getPrivkeyDB().get(hash);
		if (privstr == null) {
			throw new ClientException("No account for passphrase in database");
		}
		try {
			return Crypto.decodeRSAPrivateKey(privstr,  passphrase);
		} catch (IOException e) {
			throw new ClientException(null, e);
		}
	}
	
	/**
	 * Log in locally
	 * @param passphrase
	 * @throws ClientException if there is no user associated with passphrase,
	 *         or if we somehow fail to encode the public key to a string.
	 */
	public void login(String passphrase) throws ClientException {
		this.logout();
		KeyPair privkey = this.getPrivkey(passphrase);
		String pubkeystr;
		try {
			pubkeystr = Crypto.encodeRSAPublicKey(privkey);
		} catch (IOException e) {
			throw new ClientException(e);
		}
		String id = Crypto.getKeyID(pubkeystr);
		this.id = id;
		this.privkey = privkey;
		this.pubkeystr = pubkeystr;
	}

	public void loginWithSessionid(String sessionid) throws ClientException {
		String passphrase = this.sessionPassphrase(sessionid);
		this.login(passphrase);
		this.isSyncedreq = true;  // Don't need a server sync after a session login
	}
	
	public void loginNewSession(String passphrase) throws ClientException {
		this.login(passphrase);
		this.makeSession(passphrase);
	}
	
	public void logout() {
		if (id != null) {
			this.removeSession();
			id = null;
		}
		privkey = null;
		serverid = null;
		ServerProxy s = server;
		if (s != null) {
			server = null;
			s.close();
		}
	}

/*
;; All the API methods below require the user to be logged in.
;; id and privkey must be set.

(defmethod current-user ((client client))
  "Return current user ID if logged in, otherwise nil."
  (and (privkey client) (id client)))

(defmethod require-current-user ((client client))
  (or (current-user client) (error "Not logged in")))

(defmethod user-pubkey ((client client) &optional (id (id client)))
  "Return pubkey of a user, default logged-in user"
  (let ((db (db client)))
    (and id (db-get db $PUBKEY id))))

(defstruct server-info
  id
  name
  url)

(defmethod getserver ((client client) serverid &optional all)
  "Returns a SERVER-INFO instance, or NIL if it doesn't find the SERVERID.
   If ALL is true, return the server even if the current user isn't logged in."
  (and (or all (userreq client serverid))
       (make-server-info :id serverid
                         :name (serverprop client $NAME serverid)
                         :url (serverprop client $URL serverid))))

(defmethod getservers ((client client) &optional all)
  "Return all the servers known by the current user,
   as a list of SERVER instances.
   (SERVER-PUBKEYSIG SERVER) will be blank if the user has no account at SERVER."
  (let* ((db (db client))
         (id (require-current-user client))
         (servers (db-contents db $ACCOUNT id $SERVER))
         (res nil))
    (dolist (serverid servers)
      (let ((server (getserver client serverid all)))
        (when server (push server res))))

    (sort (nreverse res) #'string-lessp :key #'server-info-name)))

(defun url-p (url)
  "Returns true if $url might be a properly-formed URL."
  (ignore-errors
    (and (not (blankp url))
         (puri:parse-uri url))))

(defun encode-coupon (url number)
  (format nil "[~a ~a]" url number))

(defun decode-coupon (coupon)
  (check-type coupon string)
  (handler-case
      (let* ((coupon (trim coupon))
             (len (length coupon)))
        (when (eql #\] (aref coupon (1- len)))
          (setq coupon (subseq coupon 0 (1- len))))
        (when (eql #\[ (aref coupon 0))
          (setq coupon (subseq coupon 1)))
        (setq coupon (substitute #\space #\, coupon))
        (let* ((pos (position #\space coupon))
               (pos2 (position #\space coupon
                               :start pos
                               :test (lambda (x y) (not (eql x y))))))
          (values (subseq coupon 0 pos)
                  (subseq coupon pos2))))
    (error ()
      (error "Malformed coupon"))))
  

(defun parse-coupon (coupon)
  "Parse a coupon into serverid, url, and coupon number.
   Returns two values:
     1) url
     2) coupon-number
   Coupon can be [$url,$coupon_number] or
   ($serverid,coupon,$url,$coupon_number,$asset,$amount,note:$note)"
  (multiple-value-bind (url coupon-number) (decode-coupon coupon)
    (unless (url-p url)
      (error "Coupon url isn't a url: ~s" url))
    (unless (coupon-number-p coupon-number)
      (error "Coupon number malformed: ~a" coupon-number))
    (values url coupon-number)))

(defmethod verify-coupon ((client client) coupon serverid url)
  "Verify that a message is a valid coupon.
   Check that it is actually signed by the server that it
   claims to be from.
   Ask the server whether a coupon of that number exists."
  (let ((parser (parser client))
        (coupon-number (nth-value 1 (parse-coupon coupon))))
    (verify-server client url serverid)
    (let* ((msg (strcat "(0," $SERVERID ",0," coupon-number "):0"))
           (server (make-server-proxy client url))
           (msg (process server msg))
           (reqs (parse parser msg)))
      (match-serverreq client (car reqs) $REGISTER serverid)
      (unless (eql 2 (length reqs))
        (error "verifycoupon: expected 2 messages from server"))
      (match-serverreq client (cadr reqs) $COUPONNUMBERHASH serverid))))

;; Returns three values:
;;   1) serverid
;;   2) server pubkey
;;   3) server name
(defmethod serverid-for-url ((client client) url &optional serverid)
  (let* ((parser (parser client))
         (msg (strcat "(0," $SERVERID ",0):0"));
         (server (make-server-proxy client url))
         (msg (process server msg))
         (save-serverid (prog1 (serverid client)
                        (setf (serverid client) serverid)))
         (args (unwind-protect (match-message parser msg)
                 (setf (serverid client) save-serverid)))
         (request (getarg $REQUEST args))
         (serverid (getarg $CUSTOMER args))
         (pubkey (getarg $PUBKEY args))
         (name (getarg $NAME args)))
    (when (equal $FAILED request)
      (error "Failed to register at server: ~s"
             (or (getarg $ERRMSG args) msg)))
    (unless (and (equal $REGISTER request)
                 (equal serverid (getarg $SERVERID args)))
      (error "Server's register message malformed"))
    (unless (equal (pubkey-id pubkey) serverid)
      (error "verifyserver: Server's id doesn't match its public key"))
    (values serverid pubkey name)))

(defmethod verify-server ((client client) url &optional id)
  "Verify that a server matches its URL.
   Add the server to our database if it's not there already.
   Error if ID is non-null and doesn't match serverid at URL.
   Return serverid, or error."
  (unless (url-p url)
    (error "Not a URL: ~s" url))
  (when (blankp id) (setq id nil))
  (let* ((db (db client))
         (urlhash (sha1 url))
         (serverid (db-get db $SERVER $SERVERID urlhash)))
    (cond (serverid
           (when (and id (not (equal id serverid)))
             (error "verifyserver: id <> serverid"))
           (unless id (setq id serverid)))
          (t
           (multiple-value-bind (serverid pubkey name) (serverid-for-url client url)
             (if (not id)
                 (setq id serverid)
                 (unless (equal serverid id)
                   (error "Serverid different than expected")))
             (unless (serverprop client $URL serverid)
               ;; Initialize the server in the database
               (setf (db-get db $SERVER $SERVERID urlhash) serverid
                     (db-get db (serverkey client $URL serverid)) url
                     (db-get db (serverkey client $NAME serverid)) name
                     (db-get db (pubkeykey serverid))
                     (format nil "~a~%" (trim pubkey))))
             serverid)))))

(defmethod addserver ((client client) url &optional name couponok)
  "Add a server with the given URL to the database.
   URL can be a coupon to redeem that with registration.
   No error, but does nothing, if the server is already there.
   If the server is NOT already there, registers with the given NAME and coupon.
   If registration fails, removes the server and you'll have to add it again
   after getting enough usage tokens at the server to register.
   Sets the client instance to use this server until addserver() or setserver()
   is called to change it.
   If COUPONOK is true, does not verify a coupon with the server before using it."
  (let ((db (db client))
        (serverid nil)
        (realurl nil)
        (coupon nil))
    (require-current-user client)
    (cond ((url-p url)
           (setq realurl url
                 serverid (verify-server client url)))
          (t (multiple-value-setq (realurl coupon) (parse-coupon url))
             (setq serverid (verify-server client realurl))
             (unless couponok
               (verify-coupon client url serverid realurl))))
    (let ((already-registered-p t))
      (handler-case (setserver client serverid nil)
        (error ()
          (setq already-registered-p nil)))
      (cond (already-registered-p
             ;; User already has an account at this server.
             ;; Redeem the coupon
             (when coupon
               (redeem client coupon)))
            (t 
             (let ((oldserverid (serverid client))
                   (oldserver (server client))
                   (ok nil))
               (setf (serverid client) serverid
                     url (serverprop client $URL serverid))
               (unwind-protect
                    (progn
                      (unless url
                        (error "URL not stored for verified server: ~s" serverid))
                      (setf (server client) (make-server-proxy client url))
                      (register client name coupon serverid)
                      (forceinit client)
                      (setq ok t))
                 (unless ok
                   (setf (db-get db (userreqkey client serverid)) nil
                         (serverid client) oldserverid
                         (server client) oldserver)))))))))

(defmethod setserver ((client client) serverid &optional (check-p t))
  "Set the server to the given id.
   Sets the client instance to use this server until addserver() or setserver()
   is called to change it, by setting $this->serverid and $this->server"
  (let ((url (or (serverprop client $URL serverid)
                 (error "Server not known: ~s" serverid))))
    (require-current-user client)
    (unless (userserverprop client $REQ serverid)
      (error "User not registered at server"))
    (setf (serverid client) serverid
          (server client) (make-server-proxy client url))

    (when check-p
      (let* ((msg (sendmsg client $SERVERID (pubkey client)))
             (args (handler-case (match-message (parser client) msg)
                     (error (c)
                       (setf (serverid client) nil)
                       (error "setserver: Server's serverid response error: ~a" c)))))
        (unless (equal serverid (getarg $CUSTOMER args))
          (setf (serverid client) nil)
          (error "Serverid changed since we last contacted this server, old: ~s, new: ~s"
                 serverid (getarg $CUSTOMER args)))
        (unless (and (equal (getarg $REQUEST args) $REGISTER)
                     (equal (getarg $SERVERID args) serverid))
          (setf (serverid client) nil)
          (error "Server's serverid message wrong: ~s" msg))))))

(defmethod current-server ((client client))
  "Return current server if the user is logged in and the server is set, else false."
  (and (current-user client) (server client) (serverid client)))

(defmethod require-current-server ((client client) &optional msg)
  (unless (current-server client)
    (error (or msg "Server not set"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  All the API methods below require the user to be logged and the server to be set.
;;;  Do this by calling newuser() or login(), and addserver() or setserver().
;;;  id, privkey, serverid, & server must all be set.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod register ((client client) &optional name coupons serverid)
  "Register at the current server.
   No error if already registered
   If not registered, and COUPONS is a string or array of strings,
   assumes the string(s) are coupons, encrypts and signs them,
   and sends them to the server with the registration request."
  (let ((db (db client))
        (id (require-current-user client))
        server)
    (cond ((null serverid)
           (setq serverid (serverid client)
                 server (server client)))
          (t 
           (let ((url (or (serverprop client $URL)
                          (error "In register: Unknown serverid"))))
             (setq server (make-server-proxy client url)))))

    (require-current-server client "In register(): Server not set")

    ;; If already registered and we know it, nothing to do
    (when (db-get db (userserverkey client $PUBKEYSIG serverid) id)
      (return-from register))

    ;; See if server already knows us
    ;; Resist the urge to change this to a call to
    ;; get-pubkey-from-server. Trust me.
    (let* ((msg (process server (custmsg client $ID serverid id)))
           args)
      (handler-case
          (setq args (unpack-servermsg client msg $ATREGISTER))
        (error ()
          ;; Server doesn't know us. Register with server.
          (setq msg (apply #'custmsg client $REGISTER serverid (pubkey client)
                           (and name (list name))))
          (when coupons
            (when (stringp coupons) (setq coupons (list coupons)))
            (let ((pubkey (db-get (pubkeydb client) serverid)))
              (unless pubkey (error "Can't get server public key"))
              (dolist (coupon coupons)
                (dotcat msg "." (custmsg client $COUPONENVELOPE serverid
                                         (pubkey-encrypt coupon pubkey))))))
          (setq msg (process server msg)
                args (unpack-servermsg client msg $ATREGISTER))))

      ;; Didn't fail. Notice registration here
      (setq args (getarg $MSG args))
      (unless (and (equal (getarg $CUSTOMER args) id)
                   (equal (getarg $REQUEST args) $REGISTER)
                   (equal (getarg $SERVERID args) serverid))
        (error "Malformed registration message"))
      (let* ((pubkey (getarg $PUBKEY args))
             (keyid (pubkey-id pubkey)))
        (unless (equal keyid id)
          (error "Server's pubkey wrong"))
        (setf (db-get db (userserverkey client $PUBKEYSIG) id) msg
              (db-get db (userserverkey client $REQ)) "-1")))))

(defconstant $PRIVKEY-CACHE-SALT "privkey-cache-salt")

(defmethod privkey-cached-p ((client client) &optional serverid)
  (unless serverid
    (require-current-server client "In privkey-cached-p: no current server")
    (setq serverid (serverid client)))
  (equal "cached" (userserverprop client $PRIVKEYCACHEDP serverid)))

(defmethod (setf privkey-cached-p) (value (client client) &optional serverid)
  (unless serverid
    (require-current-server client "In (setf privkey-cached-p): no current server")
    (setf serverid (serverid client)))
  (setf (userserverprop client $PRIVKEYCACHEDP serverid) (and value "cached"))
  value)

(defmethod need-privkey-cache-p ((client client) &optional serverid)
  (unless serverid
    (require-current-server client "In privkey-cached-p: no current server")
    (setq serverid (serverid client)))
  (equal $NEEDPRIVKEYCACHE (userserverprop client $NEEDPRIVKEYCACHE serverid)))

(defmethod (setf need-privkey-cache-p) (value (client client) &optional serverid)
  (unless serverid
    (require-current-server client "In privkey-cached-p: no current server")
    (setq serverid (serverid client)))
  (setf (userserverprop client $NEEDPRIVKEYCACHE serverid)
        (and value $NEEDPRIVKEYCACHE))
  value)

;; We could encrypt the private key again, so it doesn't look like a
;; private key, but that's really not any more secure, since it will
;; only use the passphrase a second time. We could require yet
;; another passphrase, but users will forget that, since they'll
;; hardly ever use it.
(defmethod cache-privkey ((client client) sessionid &optional uncache-p)
  (require-current-server client "In cache-privkey: no current server")
  (when (and (not uncache-p)
             (equal (id client) (serverid client)))
    (error "You may not cache the server private key."))
  (flet ((doit (passphrase)
           (let* ((db (db client))
                  (data (if uncache-p
                            ""
                            (db-get db $PRIVKEY (passphrase-hash passphrase))))
                  (key (passphrase-hash passphrase $PRIVKEY-CACHE-SALT)))
             (writedata client key data t)
             (setf (privkey-cached-p client) (not uncache-p))
             nil)))
    (let ((passphrase (session-passphrase client sessionid)))
      (unwind-protect (doit passphrase)
        (destroy-password passphrase)))))

(defmethod fetch-privkey ((client client) serverurl passphrase)
  (let ((key (passphrase-hash passphrase $PRIVKEY-CACHE-SALT)))
    (readdata client key :anonymous-p t :serverurl serverurl)))

(defstruct contact
  id
  name
  nickname
  note
  servers
  client)

(defmethod contact-contact-p ((contact contact))
  (and (contact-client contact)
       (member (serverid (contact-client contact))
               (contact-servers contact)
               :test #'equal)))

(defun string-compare (s1 s2)
  (cond ((string-lessp s1 s2) -1)
        ((string-equal s1 s2) 0)
        (t 1)))

(defun properties-compare (a1 a2 keys &optional (comparef #'string-compare))
  (dolist (key keys 0)
    (let ((comparef comparef))
      (when (listp key)
        (setq comparef (cdr key) key (car key)))
      (let ((res (funcall comparef (funcall key a1) (funcall key a2))))
        (unless (eql 0 res) (return res))))))

(defun properties-lessp (a1 a2 keys &optional (comparef #'string-compare))
  (< (properties-compare a1 a2 keys comparef) 0))

(defun contacts-lessp (c1 c2)
  (properties-lessp c1 c2 '(contact-nickname contact-name contact-id)))

;; Move contacts from old location, under server, to new location,
;; top-level of contact.
(defmethod fix-contacts ((client client))
  (let ((db (db client))
        (id (id client)))
    (when (and id (not (db-contents db $ACCOUNT id $CONTACT $SERVERS)))
      (let ((serverkey (append-db-keys $ACCOUNT id $SERVER))
            (contactkey (append-db-keys $ACCOUNT id $CONTACT)))
        (dolist (serverid (db-contents db serverkey))
          (dolist (otherid (db-contents db serverkey serverid $CONTACT))
            (let ((old-contactkey (append-db-keys serverkey serverid $CONTACT otherid))
                  (new-contactkey (append-db-keys contactkey otherid)))
              (unless (db-get db new-contactkey $NICKNAME)
                (setf (db-get db new-contactkey $NICKNAME)
                      (db-get db old-contactkey $NICKNAME)))
              (setf (db-get db new-contactkey $NOTE)
                    (let ((note (db-get db new-contactkey $NOTE))
                          (new-note (db-get db old-contactkey $NOTE)))
                      (cond (note
                             (if new-note
                                 (strcat note #\newline new-note)
                                 note))
                            (t note))))
              (unless (db-get db new-contactkey $NAME)
                (setf (db-get db new-contactkey $NAME)
                      (db-get db old-contactkey $NAME)))
              (unless (db-get db new-contactkey $PUBKEYSIG)
                (setf (db-get db new-contactkey $PUBKEYSIG)
                      (db-get db old-contactkey $PUBKEYSIG)))
              (let ((servers (adjoin serverid
                                   (explode
                                    #\space (db-get db new-contactkey $SERVERS))
                                   :test #'equal)))
                (setf (db-get db new-contactkey $SERVERS)
                      (apply #'implode #\space servers)))
              (setf (db-get db old-contactkey $NICKNAME) nil
                    (db-get db old-contactkey $NOTE) nil
                    (db-get db old-contactkey $NAME) nil
                    (db-get db old-contactkey $PUBKEYSIG) nil))))))))

(defmethod getcontacts ((client client) &optional all-p)
  "Get contacts for the current server.
   Contacts are sorted by nickname, name, id
   Signals an error or returns a list of CONTACT instances.
   If ALL-P is true, return all contacts.
   Otherwise, return only contacts for the current server."
  (let ((db (db client)))
    (require-current-server client "In getcontacts(): Server not set")
    (fix-contacts client)
    (with-db-lock (db (userreqkey client))
      (let* ((ids (db-contents db (contactkey client)))
             (serverid (serverid client))
             (res (loop
                     for otherid in ids
                     for contact = (getcontact-internal client otherid nil nil)
                     when contact
                     collect contact)))
        (unless all-p
          (setq res
                (delete-if (lambda (contact)
                             (not (member serverid (contact-servers contact)
                                          :test #'equal)))
                           res)))
        (sort res #'contacts-lessp)))))

(defmethod getcontact ((client client) otherid &optional add)
  "Get a contact, by ID. Return a CONTACT instance."
  (when (current-server client)
    (with-db-lock ((db client) (userreqkey client))
      (getcontact-internal client otherid add))))

(defmethod getcontact-internal ((client client) otherid &optional add (probeserver t))
  (fix-contacts client)
  (let ((pubkeysig (contactprop client otherid $PUBKEYSIG)))
    (unless pubkeysig
      (cond (add
             (addcontact-internal client otherid)
             (setq pubkeysig (contactprop client otherid $PUBKEYSIG)))
            (probeserver
             (multiple-value-bind (pubkeysig name) (get-id client otherid)
               (return-from getcontact-internal
                 (and pubkeysig (make-contact :id otherid :name name
                                              :client client)))))))
    (when pubkeysig
      (make-contact
       :id otherid
       :name (contactprop client otherid $NAME)
       :nickname (contactprop client otherid $NICKNAME)
       :note (contactprop client otherid $NOTE)
       :servers (explode #\space (contactprop client otherid $SERVERS))
       :client client))))
  
(defmethod addcontact ((client client) otherid &optional nickname note)
  "Add a contact to the current server.
   If it's already there, change its nickname and note, if included."
  (require-current-server client)
  (with-db-lock ((db client) (userreqkey client))
    (addcontact-internal client otherid nickname note)))

(defmethod addcontact-internal ((client client) otherid &optional nickname note)
  (let ((db (db client))
        pubkeysig
        name)
    (let* ((serverid (serverid client))
           (servers (explode #\space (contactprop client otherid $SERVERS))))
      (unless (member serverid servers :test #'equal)
        (setf (db-get db (contactkey client otherid $SERVERS))
              (apply #'implode #\space serverid servers))))
    (cond ((contactprop client otherid $PUBKEYSIG)
           (when nickname
             (setf (db-get db (contactkey client otherid $NICKNAME)) nickname))
           (when note
             (setf (db-get db (contactkey client otherid $NOTE)) note)))
          (t
           (multiple-value-setq (pubkeysig name) (get-id client otherid))
           (unless pubkeysig (error "Can't find id at server: ~s" otherid))
           (unless nickname
             (setq nickname (or name "anonymous")))
           (setf (db-get db (contactkey client otherid $NICKNAME)) nickname
                 (db-get db (contactkey client otherid $NOTE)) note
                 (db-get db (contactkey client otherid $NAME)) name
                 (db-get db (contactkey client otherid $PUBKEYSIG)) pubkeysig)))
    pubkeysig))

(defmethod deletecontact ((client client) otherid)
  "Delete a contact from the current server."
  (let ((db (db client)))
    (with-db-lock (db (userreqkey client))
      (let ((key (contactkey client otherid)))
        (dolist (k (db-contents db key))
          (setf (db-get db key k) nil))))))

(defconstant $SERVER-CONTACTS-SALT "server-contacts-salt")

(defun server-contacts-key (client)
  (sha1 (xor-salt (id client) $SERVER-CONTACTS-SALT)))

(defmethod %get-server-contacts ((client client))
  (ignore-errors
    (readdata client (server-contacts-key client))))

(defmethod (setf %get-server-contacts) (value client)
  (writedata client (server-contacts-key client) (or value ""))
  value)

(defun pack-contact (contact)
  (check-type contact contact)
  `(:id ,(contact-id contact)
    :name ,(contact-name contact)
    :nickname ,(contact-nickname contact)
    :note ,(contact-note contact)
    :servers ,(contact-servers contact)))

(defun unpack-contact (client list)
  (apply #'make-contact :client client list))

(defun pack-contacts (contacts)
  (prin1-to-string (mapcar #'pack-contact contacts)))

(defun unpack-contacts (client string)
  (mapcar (lambda (parms) (unpack-contact client parms))
          (read-from-string string)))

(defmethod get-server-contacts ((client client))
  (let ((string (%get-server-contacts client)))
    (and string
         (unpack-contacts
          client (privkey-decrypt string (privkey client))))))

(defmethod (setf get-server-contacts) (value (client client))
  (setf (%get-server-contacts client)
        (pubkey-encrypt (pack-contacts value) (privkey client)))
  value)

(defun merge-contact-strings (old new)
  (if (blankp old) new old))

(defmethod sync-contacts ((client client))
  (let ((contacts (getcontacts client t))
        (server-contacts (ignore-errors (get-server-contacts client)))
        (changed-p nil))
    (dolist (sc server-contacts)
      (let* ((otherid (contact-id sc))
             (c (find otherid contacts :test #'equal :key #'contact-id)))
        (cond (c
               (let ((new-nick
                      (merge-contact-strings
                       (contact-nickname c) (contact-nickname sc)))
                     (new-note
                      (merge-contact-strings
                      (contact-note c) (contact-note sc)))
                     (new-servers
                      (union (contact-servers c) (contact-servers sc)
                             :test #'equal)))
                 (unless (equal new-nick (contact-nickname c))
                   (setf (contact-nickname c) new-nick
                         (contactprop client otherid $NICKNAME) new-nick))
                 (unless (equal new-note (contact-note c))
                   (setf (contact-note c) new-note
                         (contactprop client otherid $NOTE) new-note))
                 (unless (eql (length new-servers) (length (contact-servers c)))
                   (setf (contact-servers c) new-servers
                         (contactprop client otherid $SERVERS)
                         (apply #'implode #\space new-servers)))
                 (unless changed-p
                   (setq changed-p
                         (not (and (equal new-nick (contact-nickname sc))
                                   (equal new-note (contact-note sc))
                                   (eql (length new-servers)
                                        (length (contact-servers sc)))))))))
              (t (push sc contacts)
                 (setq changed-p t)
                 (let ((pubkeysig (and (not (contactprop client otherid $PUBKEYSIG))
                                       (ignore-errors (get-id client otherid)))))
                   (when pubkeysig
                     (setf (contactprop client otherid $PUBKEYSIG) pubkeysig))
                   (setf (contactprop client otherid $NICKNAME)
                         (contact-nickname sc)
                         (contactprop client otherid $NOTE)
                         (contact-note sc)
                         (contactprop client otherid $NAME)
                         (contact-name sc)
                         (contactprop client otherid $SERVERS)
                         (apply #'implode #\space (contact-servers sc))))))))
    (when (or changed-p (not (eql (length contacts) (length server-contacts))))
      (setf (get-server-contacts client) contacts))
    (values contacts changed-p)))

(defmethod get-id ((client client) id)
  "Check for an id at the server. Return false if not there.
   Return two values: pubkeysig & name"
  (let ((db (db client))
        (serverid (serverid client)))
    (when serverid
      (let* ((key (append-db-keys (userserverkey client $PUBKEYSIG) id))
             (pubkeysig (db-get db key))
             (needstore nil))
        (unless pubkeysig
          (setq pubkeysig (sendmsg client $ID serverid id)
                needstore t))
        (let ((args (ignore-errors
                      (unpack-servermsg client pubkeysig $ATREGISTER))))
          (when args
            (setq args (getarg $MSG args))
            (let ((pubkey (getarg $PUBKEY args))
                  (name (getarg $NAME args)))
              (when (equal id (pubkey-id pubkey))
                (when needstore (setf (db-get db key) pubkeysig))
                (values pubkeysig name)))))))))

(defun acct-compare (a1 a2)
  (cond ((equal a1 a2) 0)
        ((equal a1 $MAIN) -1)
        ((equal a2 $MAIN) 1)
        ((string-lessp a1 a2) -1)
        (t 1)))
  
(defun acct-lessp (a1 a2)
  (< (acct-compare a1 a2) 0))

(defmethod getaccts ((client client))
  "GET sub-account names.
   Returns an error string or an array of the sub-account names."
  (let ((db (db client)))

    (require-current-server client "In getaccts(): Server not set")
    (init-server-accts client)
    
    (sort (db-contents db (userbalancekey client)) #'acct-lessp)))

(defstruct asset
  id
  assetid
  scale
  precision
  name
  issuer
  percent)

(defun asset-lessp (a1 a2)
  (properties-lessp a1 a2 '(asset-name asset-id)))

(defmethod getassets ((client client))
  "Return the assets for which the customer has balances as
   a list of ASSET instances."
  (let ((db (db client))
        (serverid (serverid client))
        (res nil))
    (when serverid
      (let* ((key (userbalancekey client))
             (accts (db-contents db key)))
        (dolist (acct accts)
          (let ((assetids (db-contents db key acct)))
            (dolist (assetid assetids)
              (unless (find assetid res
                            :test #'equal
                            :key #'asset-assetid)
                (let ((asset (getasset client assetid)))
                  (when asset (push asset res))))))))
      (sort res #'asset-lessp))))

(defmethod getasset ((client client) assetid &optional forceserver)
  "Look up an asset.
   Signals an error or returns an ASSET instance.
   If the asset isn't found in the client database, looks it up on the
   server, and stores it in the client database."
  (require-current-server client "In getacct(): Server not set")
  (let ((db (db client))
        (key (assetkey client assetid)))
    (with-db-lock (db key)
      (let ((msg (unless forceserver (db-get db key)))
            args)
        (cond (msg
               (setq args (unpack-servermsg client msg $ATASSET)))
              (t
               (setq args (getasset-internal client assetid key))))
        (let ((req (cadr (getarg $UNPACK-REQS-KEY args)))
              (args (getarg $MSG args))
              (percent nil)
              (issuer nil))
          (when req
            (let* ((args1 (getarg $MSG (match-serverreq client req $ATSTORAGE))))
              (setq issuer (getarg $CUSTOMER args1)
                    percent (getarg $PERCENT args1))))
          (make-asset
           :id (getarg $CUSTOMER args)
           :assetid assetid
           :scale (getarg $SCALE args)
           :precision (getarg $PRECISION args)
           :name (getarg $ASSETNAME args)
           :issuer issuer
           :percent percent))))))

(defmethod getasset-internal ((client client) assetid key)
  (let* ((db (db client))
         (serverid (serverid client))
         (req (getreq client))
         (msg (sendmsg client $GETASSET serverid req assetid))
         (args (with-verify-sigs-p ((parser client) t)
                 (unpack-servermsg client msg $ATASSET)))
         (msgargs (getarg $MSG args)))
    (unless (and (equal (getarg $REQUEST msgargs) $ASSET)
                 (equal (getarg $SERVERID msgargs) serverid)
                 (equal (getarg $ASSET msgargs) assetid))
      (error "Server wrapped wrong object with @asset"))
    (setf (db-get db key) msg)
    args))

(defmethod addasset ((client client) scale precision assetname &optional percent)
  (let ((db (db client)))
    (with-db-lock (db (userreqkey client))
      (let ((id (id client))
            (serverid (serverid client))
            (server (server client))
            (parser (parser client)))

        (unless (and id serverid)
          (error "Can't add asset unless server is set"))

        (let* ((assetid (assetid id scale precision assetname))
               (time (gettime client))
               (tranfee (getfees client))
               (tokenid (fee-assetid tranfee))
               (msg (custmsg client $ASSET serverid assetid scale precision assetname))
               (nonserverp (not (equal id serverid)))
               (bal1 (and nonserverp
                          (balance-amount (or (getbalance client $MAIN tokenid)
                                              (error "No token balance")))))
               (oldasset (ignore-errors (getasset client assetid t)))
               (bal2 nil)
               (storage nil)
               (mainbals (make-equal-hash))
               (acctbals (make-equal-hash $MAIN mainbals))
               balancehash)
          (cond ((and oldasset
                      (if (blankp percent)
                          (blankp (asset-percent oldasset))
                          (and (equal id (asset-issuer oldasset))
                               (equal percent (asset-percent oldasset)))))
                 ;; check to be sure we've got a balance in this asset
                 (let ((db (db client)))
                   (unless (dolist (acct (db-contents db (userbalancekey client)))
                             (when (db-get db (userbalancekey client acct assetid))
                               (return t)))
                     (forceinit client))))                   
                (t
                 (when nonserverp
                   (let ((tokens (if oldasset 1 2))
                         (ispos (>= (bccomp bal1 0) 0)))
                     (setq bal1 (bcsub bal1 tokens))
                     (when (and ispos (< (bccomp bal1 0) 0))
                       (error
                        (if oldasset
                            "You need 1 usage token to update an asset"
                            "You need 2 usage tokens to create a new asset"))))
                   (setq bal1
                         (custmsg client $BALANCE serverid time tokenid bal1)))
                 (unless oldasset
                   (setq bal2 (custmsg client $BALANCE serverid time assetid "-1")))
                 (when bal1
                   (setf (gethash tokenid mainbals) bal1))
                 (when bal2
                   (setf (gethash assetid mainbals) bal2))
                 (when nonserverp
                   (setq balancehash (balancehashmsg client time acctbals)))

                 (unless (blankp percent)
                   (unless (is-numeric-p percent)
                     (error "percent must be numeric"))
                   (setq storage
                         (custmsg client $STORAGE serverid time assetid percent))
                   (dotcat msg "." storage))
                 (when bal1 (dotcat msg "." bal1))
                 (when bal2 (dotcat msg "." bal2))
                 (when balancehash (dotcat msg "." balancehash))

                 (setq msg (process server msg))

                 ;; Request sent. Check for error
                 (let ((reqs (parse parser msg))
                       gotbal1
                       gotbal2
                       gotstorage)
                   (dolist (req reqs)
                     (let* ((args (match-serverreq client req))
                            (msg (get-parsemsg req))
                            (m (trim (get-parsemsg (getarg $MSG args)))))
                       (cond ((equal m bal1) (setq gotbal1 msg))
                             ((equal m bal2) (setq gotbal2 msg))
                             ((equal m storage) (setq gotstorage msg)))))
                   (when (or (and bal1 (not gotbal1))
                             (and bal2 (not gotbal2)))
                     (error
                      "While adding asset: missing returned balance from server"))
                   (when (and (not (blankp percent)) (not gotstorage))
                     (error
                      "While adding asset: storage fee not returned from server"))

                   ;; All is well. Commit the balance changes
                   (when bal1
                     (setf (db-get db (userbalancekey client $MAIN tokenid))
                           gotbal1))
                   (when bal2
                     (setf (db-get db (userbalancekey client $MAIN assetid))
                           gotbal2))
            
                   (getasset client assetid t)))))))))

(defstruct fee
  type
  assetid
  assetname
  amount
  formatted-amount)

(defun fee-lessp (fee1 fee2)
  (properties-lessp fee1 fee2 '(fee-assetname fee-type)))

(defmethod getfees ((client client) &optional reload)
  "Look up the transaction cost.
   Returns three values (FEE instances)
     1) tranfee
     2) regfee
     3) List of other fees"
    (require-current-server client "In getfees(): Server not set")
    (let ((msg (unless reload (tranfee client))))
      (unless msg
        (setq msg (getfees-internal client)))
      (flet ((decode-fee (msg type)
               (let* ((args (unpack-servermsg client msg type))
                      (assetid (getarg $ASSET args))
                      (asset (getasset client assetid))
                      (amount (getarg $AMOUNT args)))
                 (make-fee :type (if (equal type $FEE)
                                     (getarg $OPERATION args)
                                     type)
                           :assetid assetid
                           :assetname (asset-name asset)
                           :amount amount
                           :formatted-amount
                           (format-asset-value client amount asset)))))
        (let ((tranfee (decode-fee msg $TRANFEE))
              (regfee (regfee client)))
          (when regfee
            (setf regfee (decode-fee regfee $REGFEE)))
        (let ((reqs (parse (parser client) (other-fees client)))
              (others nil))
          (dolist (req reqs)
            (let* ((args (match-serverreq client req $FEE))
                   (assetid (getarg $ASSET args))
                   (asset (getasset client assetid))
                   (amount (getarg $AMOUNT args)))
              (push (make-fee :type (getarg $OPERATION args)
                              :assetid assetid
                              :assetname (asset-name asset)
                              :amount amount
                              :formatted-amount
                              (format-asset-value client amount asset))
                    others)))
          (dolist (fee others)
            (let ((assetid (fee-assetid fee)))
              (getasset client assetid t)))
          (values tranfee regfee (sort others #'fee-lessp)))))))

(defmethod getfees-internal ((client client))
  (let ((db (db client))
        (key (tranfeekey client))
        (parser (parser client))
        (serverid (serverid client)))
    (with-db-lock (db key)
      (let* ((req (getreq client))
             (msg (sendmsg client $GETFEES serverid req))
             (reqs (parse parser msg t))
             (feemsg nil)
             (regmsg nil)
             (fee-alist nil))
        (dolist (req reqs)
          (let* ((args (match-serverreq client req))
                 (request (getarg $REQUEST args)))
            (cond ((equal request $TRANFEE)
                   (setq feemsg (get-parsemsg req)))
                  ((equal request $REGFEE)
                   (setf regmsg  (get-parsemsg req)))
                  ((equal request $FEE)
                   (let* ((operation (getarg $OPERATION args))
                          (cell (assocequal operation fee-alist))
                          (msg (get-parsemsg req)))
                     (if cell
                         (dotcat (cdr cell) "." msg)
                         (push (cons operation msg) fee-alist)))))))
        (unless feemsg (error "No tranfee from getfees request"))
        (setf (db-get db key) feemsg
              (db-get db (regfee-key client)) regmsg)
        (let* ((key (other-fees-key client))
               (operations (db-contents db key)))
          (dolist (cell fee-alist)
            (let ((operation (car cell)))
              (setf operations (delete operation operations :test #'equal)
                    (db-get db key operation) (cdr cell))))
          (dolist (operation operations)
            (setf (db-get db key operation) nil)))
        feemsg))))

(defmethod setfees ((client client) &rest fees)
  "Set the server transaction fees.
   FEES is a list of FEE instances.
   If $TRANFEE or $REGFEE is omitted, the server defaults will be used.
   The $TRANFEE & $REGFEE instances must use the tokenid as assetid.
   An assetid of NIL will be interpreted as tokenid.
   Refetches the fees from the server after setting them, and
   returns the result of (getfees client t)."
  (require-current-server client "In setfees(): Server not set")
  (unless (equal (id client) (serverid client))
    (error "Only the server can set fees"))
  (with-db-lock ((db client) (userreqkey client))
    (setfees-internal client fees)))

(defun setfees-internal (client fees)
  (let ((time (gettime client))
        (serverid (serverid client))
        (tokenid (fee-assetid (getfees client)))
        (tranmsg nil)
        (regmsg nil)
        (others-msg nil)
        (count 0))
    (dolist (fee fees)
      (incf count)
      (let* ((type (fee-type fee))
             (tranfeep (equal type $TRANFEE))
             (regfeep (equal type $REGFEE))
             (amount (fee-amount fee))
             (assetid (or (fee-assetid fee) tokenid))
             (asset (getasset client assetid)))
        (when (null amount)
          (let ((formatted-amount (fee-formatted-amount fee)))
            (when formatted-amount
              (setf amount
                    (unformat-asset-value client formatted-amount asset)))))
        (unless (and amount
                     (ignore-errors
                       (>= (parse-integer (as-string amount))
                           (if (or tranfeep regfeep) 0 1))))
          (error "Fee amount not a positive integer: ~s" amount))
        (cond (tranfeep
               (when tranmsg
                 (error "Only one ~s allowed" $TRANFEE))
               (unless (equal assetid tokenid)
                 (error "~s must be in tokens" $TRANFEE))
               (let ((msg (custmsg client $TRANFEE serverid time assetid amount)))
                 (setf tranmsg msg)))
              (regfeep
               (when regmsg
                 (error "Only one ~s allowed" $REGFEE))
               (unless (equal assetid tokenid)
                 (error "~s must be in tokens" $REGFEE))
               (let ((msg (custmsg client $REGFEE serverid time assetid amount)))
                 (setf regmsg msg)))
              (t (let ((msg (custmsg client $FEE
                                     serverid time type assetid amount)))
                 (if others-msg
                     (dotcat others-msg "." msg)
                     (setf others-msg msg)))))))
    (let* ((setfees-msg (custmsg client $SETFEES time count))
           (msg setfees-msg))
      (when tranmsg
        (dotcat msg "." tranmsg))
      (when regmsg
        (dotcat msg "." regmsg))
      (when others-msg
        (dotcat msg "." others-msg))
      ;; Here's where we send the message to the server
      (let* ((servermsg (process (server client) msg))
             (args (unpack-servermsg client servermsg $ATSETFEES serverid)))
        (unless (equal setfees-msg (trim (get-parsemsg (getarg $MSG args))))
          (error "Returned message wasn't sent")))
      ;; All is well, clear the database, and reload
      (setf (db-get (db client) (tranfeekey client)) nil)
      (getfees client t))))

(defstruct balance
  acct
  assetid
  assetname
  amount
  time
  formatted-amount)

(defun balance-lessp (b1 b2)
  (< (properties-compare b1 b2 '((balance-acct . acct-compare) balance-assetname))
     0))

(defmethod getbalance ((client client) &optional (acct t) assetid includeraw)
  "Get user balances for all sub-accounts or just one.
   Returns a list of (ACCT BALANCE ...) lists, where the
   BALANCE instances are sorted by ASSETNAME and ASSETID.

   The ACCT arg is T for all sub-accounts, nil for the
   $MAIN sub-account only, or a string for that sub-account only.
   The ASSETID arg is false for all assets or an ID for that asset only.

   If you include a specific ACCT and a specific ASSETID, the result
   is a single BALANCE instance, not a list of lists.

   If INCLUDERAW is true, returns a second value, a hash table mapping
   each BALANCE instance to the raw message that encodes it."
  (require-current-server client "In getbalance(): Server not set")
  (init-server-accts client)
  (with-db-lock ((db client) (userreqkey client))
    (getbalance-internal client acct assetid includeraw)))

(defmethod getbalance-internal ((client client) acct assetid &optional includeraw)
  (unless acct (setq acct $MAIN))
  (let* ((db (db client))
         (accts (if (stringp acct)
                    (list acct)
                    (db-contents db (userbalancekey client))))
         (res nil)
         (msghash (and includeraw (make-hash-table :test 'eq))))
    (dolist (acct accts)
      (let ((assetids (if assetid
                          (list assetid)
                          (db-contents db (userbalancekey client acct))))
            (balances nil))
        (dolist (assetid assetids)
          (multiple-value-bind (amount time msg)
              (userbalanceandtime client acct assetid)
            (when amount
              (unless (is-numeric-p amount t)
                (error "While gathering balances, non-numeric amount: ~s" amount))
              (let* ((asset (getasset client assetid))
                     (formatted-amount (format-asset-value client amount asset))
                     (assetname (asset-name asset)))
                (push (make-balance :acct acct
                                    :assetid assetid
                                    :assetname assetname
                                    :amount amount
                                    :time time
                                    :formatted-amount formatted-amount)
                      balances)
                (when includeraw
                  (setf (gethash (car balances) msghash) msg))))))
        (when balances
          (push (cons acct (sort balances #'balance-lessp)) res))))
    (values
     (if (and (stringp acct) assetid)
         (cadar res)
         (sort res #'acct-lessp :key #'car))
     msghash)))

(defstruct fraction
  assetid
  assetname
  amount
  scale)

(defmethod getfraction ((client client) &optional assetid includeraw)
  "Get the fraction balance for a particular assetid, or all assetids,
   Returns a list of FRACTION instances, or a single FRACTION instance,
   if ASSETID is specified.
   If INCLUDERAW is true, return, as a second value, a hash table mapping
   from FRACTION instances to message strings."
  (let ((db (db client)))
    (require-current-server client "In getfraction(): Server not set")
    (init-server-accts client)

    (with-db-lock (db (userreqkey client))
      (let ((assetids (if assetid
                          (list assetid)
                          (db-contents db (userfractionkey client))))
            (res nil)
            (msghash (and includeraw (make-hash-table :test 'eq))))
        (dolist (assetid assetids)
          (let* ((key (userfractionkey client assetid))
                 (msg (db-get db key)))
            (when msg
              (let* ((args (getarg $MSG
                                   (unpack-servermsg client msg $ATFRACTION)))
                     (fraction (getarg $AMOUNT args))
                     (asset (getasset client assetid))
                     (scale (asset-scale asset))
                     (assetname (asset-name asset)))
                (push (make-fraction :assetid assetid
                                     :assetname assetname
                                     :amount fraction
                                     :scale scale)
                      res)
                (when includeraw
                  (setf (gethash (car res) msghash) msg))))))
        (values
         (if assetid (car res) (nreverse res))
         msghash)))))

(defstruct (balance+fraction (:include balance))
  fraction)

(defmethod getstoragefee ((client client) &optional assetid)
  "Get the storagefee balance for a particular assetid, or all assetids,
   Returns a list of BALANCE instances, or a single BALANCE instance, if
   ASSETID is specified."
  (let ((db (db client)))
    (require-current-server client "In getfraction(): Server not set")
    (init-server-accts client)

    (with-db-lock (db (userreqkey client))
      (let* ((key (userstoragefeekey client))
             (assetids (if assetid
                           (list assetid)
                           (db-contents db key)))
            (res nil))
        (dolist (assetid assetids)
          (let ((msg (db-get db key assetid)))
            (when msg
              (let* ((args (unpack-servermsg client msg $STORAGEFEE))
                     (time (getarg $TIME args))
                     (assetid (getarg $ASSET args))
                     (amount (getarg $AMOUNT args))
                     (fraction "0")
                     (asset (getasset client assetid))
                     (percent (asset-percent asset)))
                (multiple-value-setq (amount fraction)
                  (normalize-balance amount fraction (fraction-digits percent)))
                (when (not (eql 0 (bccomp amount 0)))
                  (let* ((asset (getasset client assetid))
                         (formatted-amount (format-asset-value client amount asset))
                         (assetname (asset-name asset)))
                    (push (make-balance+fraction
                           :time time
                           :assetid assetid
                           :assetname assetname
                           :amount amount
                           :formatted-amount formatted-amount
                           :fraction fraction)
                          res)))))))
        (if assetid (car res) (sort res #'balance-lessp))))))

(define-condition validation-error (simple-error)
  ())

(defun validation-error (format-control &rest format-arguments)
  (error 'validation-error
         :format-control format-control
         :format-arguments format-arguments))

(defmethod spend ((client client) toid assetid formattedamount &optional acct note)
  "Initiate a spend
   TOID is the id of the recipient of the spend
     May be $COUPON to generate a coupon
     In that case, the coupon itself can be fetched with getcoupon()
   ASSETID is the id of the asset to spend.
   FORMATTEDAMOUNT is the formatted amount to spend.
   ACCT is the source sub-account, default $MAIN.
   ACCT can also be a list: (FROMACCT TOACCT), for a transfer.
   In that case TOID should be the logged in ID.
   Fees are always taken from $MAIN.
   Returns a plist of fees, both in ASSETID
     (:storage-fee <storage> :transaction-fee <transaction>)"
  (let ((db (db client)))
    (require-current-server client "In spend(): Server not set")
    (init-server-accts client)
    (with-db-lock (db (userreqkey client))
      (handler-bind
          ((validation-error #'signal)
           (error (lambda (c)
                    (declare (ignore c))
                    (reload-asset-p client assetid)
                    (forceinit client)
                    (return-from spend
                      (spend-internal
                       client toid assetid formattedamount acct note)))))
        (spend-internal client toid assetid formattedamount acct note)))))

(defmethod send-commit-msg ((client client) time)
  (let* ((serverid (serverid client))
         (server (server client))
         (parser (parser client))
         (msg (custmsg client $COMMIT serverid time))
         (servermsg (process server msg))
         (reqs (parse parser servermsg t))
         (args (handler-case (match-serverreq client (car reqs) $ATCOMMIT)
                 (error ()
                   (let* ((args (match-serverreq client (car reqs)))
                          (request (getarg $REQUEST args)))
                     (error
                      "Spend commit request returned unknown message type: ~s"
                      request))))))
    (unless (equal msg (trim (get-parsemsg (getarg $MSG args))))
      (error "Returned commit message doesn't match"))
    msg))

(defmethod spend-internal ((client client) toid assetid formattedamount acct note)
  (let* ((db (db client))
         (id (id client))
         (serverid (serverid client))
         (server (server client))
         (parser (parser client))
         (toacct (or (and (listp acct) (cadr acct)) $MAIN))
         (acct (or (if (listp acct) (car acct) acct) $MAIN))
         (asset (getasset client assetid))
         (amount (unformat-asset-value client formattedamount asset))
         (two-phase-commit-p (and (not (equal id serverid))
                                  (two-phase-commit-p client)))
         (last-transaction nil)
         oldamount
         oldtime
         time
         (storagefee 0)
         (digits 0)
         percent
         fraction
         fractime
         fracfee
         baseoldamount
         newamount
         oldtoamount
         newtoamount
         (tranfee nil)
         tranfee-asset
         (tranfee-amt nil)
         fee-balance
         (need-fee-balance-p nil)
         (operation nil)
         (fees nil)
         (fees-amounts nil)      ;alist of (assetid . amount) pairs
         )
    (declare (ignorable fees))          ;temporary

    (assert (and (stringp acct) (stringp toacct)))

    (when (and (equal id toid) (equal acct toacct))
      (validation-error "Transfer from and to the same acct (~s). Nothing to do."
             acct))

    (when (equal toid serverid)
      (validation-error "Spends to the server are not allowed."))

    ;; Must get time before accessing balances since GETTIME may FORCEINIT.
    (setq time (gettime client))

    (when (< (bccomp amount 0) 0)
      (let ((bal (userbalance client acct assetid)))
        (unless (eql 0 (bccomp bal amount))
          (validation-error
           "Negative spends must be for the whole issuer balance"))))

    (multiple-value-setq (oldamount oldtime)
      (userbalanceandtime client acct assetid))
    (cond (oldamount
           (unless (is-numeric-p oldamount t)
             (validation-error
              "Error getting balance for asset in acct ~s: ~s" acct oldamount))

           (multiple-value-setq (percent fraction fractime)
             (client-storage-info client assetid))
           (when percent
             (setq digits (fraction-digits percent))
             (multiple-value-setq (fracfee fraction)
               (storage-fee fraction fractime time percent digits))
             (multiple-value-setq (storagefee oldamount)
               (storage-fee oldamount oldtime time percent digits))
             (wbp (digits)
               (setq storagefee (bcadd storagefee fracfee)
                     baseoldamount oldamount))
             (multiple-value-setq (oldamount fraction)
               (normalize-balance oldamount fraction digits))))
          (t (setq oldamount "0")))

    (setq newamount (bcsub oldamount amount))
    (when (and (>= (bccomp oldamount 0) 0)
               (< (bccomp newamount 0) 0))
      (cond ((and (equal id toid)
                  percent
                  (<= (bccomp amount baseoldamount) 0))
             ;; User asked to transfer less than the whole amount, but the
             ;; storage fee put it over. Reduce amount to leave 0 in ACCT
             (setq amount oldamount
                   newamount 0))
            (t (validation-error "Insufficient balance"))))

    (when (equal id toid)
      (let (totime tofee)
        (multiple-value-setq (oldtoamount totime)
          (userbalanceandtime client toacct assetid))
        (when (and percent oldtoamount)
          (multiple-value-setq (tofee oldtoamount)
            (storage-fee oldtoamount totime time percent digits))
          (wbp (digits)
            (setq storagefee (bcadd storagefee tofee))))
        (wbp (digits)
          (setq newtoamount (bcadd (or oldtoamount 0) amount)))
        (when percent
          (multiple-value-setq (newtoamount fraction)
            (normalize-balance newtoamount fraction digits)))
        (when (and oldtoamount
                   (< (bccomp oldtoamount 0) 0)
                   (>= (bccomp newtoamount 0) 0))
          ;; This shouldn't be possible.
          ;; If it happens, it means the asset is out of balance.
          (validation-error "Asset out of balance on self-spend"))))

    (unless (equal id serverid)
      (multiple-value-bind (tf rf fs) (getfees client)
        (declare (ignore rf))
        (setq tranfee tf
              tranfee-asset (fee-assetid tranfee))
        (setf operation (if (equal id toid) $TRANSFER $SPEND)
              fees (delete-if
                    (lambda (f)
                      (or (not (equal (fee-assetid f) assetid))
                          (let ((asset (getasset client (fee-assetid f))))
                            (equal (or (asset-issuer asset)
                                       (asset-id asset))
                                   id))))
                    (delete-if-not
                     (lambda (f) (equal (fee-type f) operation))
                     fs))))
      (setq tranfee-amt
            (if (equal id toid)
                (if oldtoamount "0" "1")
                (fee-amount tranfee)))
      (cond ((and (equal tranfee-asset assetid)
                  (equal $MAIN acct))
             (setq newamount (bcsub newamount tranfee-amt))
             (dolist (fee fees)
               (when (equal assetid (fee-assetid fee))
                 (let ((feeamt (fee-amount fee)))
                   (setq newamount (bcsub newamount feeamt))
                   (push (cons assetid feeamt) fees-amounts))))
             (when (and (>= (bccomp oldamount 0) 0)
                        (< (bccomp newamount 0) 0))
               (validation-error "Insufficient balance for transaction fee")))
            ((and (equal id toid)
                  (equal tranfee-asset assetid)
                  (equal $MAIN toacct))
             (setq newtoamount (bcsub newtoamount tranfee-amt))
             (dolist (fee fees)
               (when (equal assetid (fee-assetid fee))
                 (let ((feeamt (fee-amount fee)))
                   (setq newtoamount (bcsub newtoamount (fee-amount fee)))
                   (push (cons assetid feeamt) fees-amounts))))
             (when (eql 0 (bccomp newtoamount oldtoamount))
               (validation-error "Transferring transaction fee to a new acct is silly"))
             (when (and (>= (bccomp oldtoamount 0) 0)
                        (< (bccomp newtoamount 0) 0))
               (validation-error
                "Insufficient destination balance for transaction fee")))
            (t
             (let ((old-fee-balance (userbalance client $MAIN tranfee-asset))
                   (feeamt 0))
               (dolist (fee fees)
                 (when (equal tranfee-asset (fee-assetid fee))
                   (let ((amt (fee-amount fee)))
                     (setf feeamt (bcadd feeamt amt))
                     (push (cons tranfee-asset amt) fees-amounts))))
               (unless (and (bc= tranfee-amt 0)
                            (bc= feeamt 0))
                 (setq fee-balance (bcsub old-fee-balance tranfee-amt feeamt)
                       need-fee-balance-p t)
                 (when (and (>= (bccomp old-fee-balance 0) 0)
                            (< (bccomp fee-balance 0) 0))
                   (validation-error
                    "Insufficient tokens for transaction fee"))))))

      ;; Compute non-refundable fee amounts for other than the token asset
      (dolist (fee fees)
        (let ((feeid (fee-assetid fee))
              (feeamt (fee-amount fee)))
          (unless (or (equal feeid tranfee-asset)
                      (not (equal feeid assetid)))
            (cond ((> (bccomp newamount feeamt) 0)
                   (setf newamount (bcsub newamount feeamt)))
                  ((and (equal id toid)
                        (> (bccomp newtoamount feeamt) 0))
                   (setf newtoamount (bcsub newtoamount feeamt)))
                  (t (error "Insufficient balance for nonrefundable fee")))
            (push (cons feeid feeamt) fees-amounts)))))

    ;; Numbers are computed and validated.
    ;; Create messages for server.
    (let (spend
          (feeandbal nil)
          (feebal nil)
          (feemsg nil)
          (fees-msgs nil)
          balance
          (tobalance nil)
          (outboxhash nil)
          (balancehash nil)
          (storagefeemsg nil)
          (fracmsg nil)
          msg)
      (when (and note (not (equal toid $COUPON)))
        (setf note (encrypt-note (pubkeydb client)
                                 (if (equal id toid) (list id) (list id toid))
                                 note)))
      (setq spend (apply #'custmsg client $SPEND serverid time
                         toid assetid amount (and note (list note))))
      (when (and tranfee-amt (not (equal id toid)))
        (setq feemsg (custmsg client $TRANFEE serverid time
                              tranfee-asset tranfee-amt)
              feeandbal feemsg))
      (when need-fee-balance-p
        (setq feebal (custmsg client $BALANCE serverid time
                              tranfee-asset fee-balance))
        (if feeandbal
            (dotcat feeandbal "." feebal)
            (setq feeandbal feebal)))

      (setq balance (custmsg client $BALANCE serverid time
                             assetid newamount acct))
      (when (equal id toid)
        (setq tobalance (custmsg client $BALANCE serverid time
                                 assetid newtoamount toacct)))
      (when (and (not (equal id serverid))
                 (not (equal id toid)))
        (setq outboxhash (outboxhashmsg client time
                                        :newitem spend
                                        :two-phase-commit-p two-phase-commit-p)))

      ;; Create fees messages
      (dolist (cell fees-amounts)
        (push (custmsg client $FEE serverid time operation (car cell) (cdr cell))
              fees-msgs))

      ;; Compute balancehash
      (unless (equal id serverid)
        (let* ((acctbals (make-equal-hash)))
          (setf (gethash assetid (get-inited-hash acct acctbals))
                balance)
          (when feebal
            (setf (gethash tranfee-asset (get-inited-hash $MAIN acctbals))
                  feebal))
          (when tobalance
            (setf (gethash assetid (get-inited-hash toacct acctbals))
                  tobalance))
          (setq balancehash
                (balancehashmsg client time acctbals two-phase-commit-p))))

      ;; Prepare storage fee related message components
      (when percent
        (setq storagefeemsg (custmsg client $STORAGEFEE serverid time
                                     assetid storagefee)
              fracmsg (custmsg client $FRACTION serverid time assetid fraction)))

      ;; Send request to server, and get response
      (setq msg spend)
      (when feeandbal (dotcat msg "." feeandbal))
      (dotcat msg "." balance)
      (when tobalance (dotcat msg "." tobalance))
      (when outboxhash (dotcat msg "." outboxhash))
      (when balancehash (dotcat msg "." balancehash))
      (when percent (dotcat msg "." storagefeemsg "." fracmsg))
      (dolist (fee fees-msgs)
        (dotcat msg "." fee))

      (let* ((servermsg (process server msg)) ; *** Here's the server call ***
             (reqs (parse parser servermsg t))
             (msgs (make-equal-hash spend t
                                    balance t))
             (coupon nil)
             encrypted-coupon)
        (handler-case (match-serverreq client (car reqs) $ATSPEND)
          (error ()
            (let* ((args (match-serverreq client (car reqs)))
                   (request (getarg $REQUEST args)))
              (error "Spend request returned unknown message type: ~s"
                     request))))
        (when tobalance (setf (gethash tobalance msgs) t))
        (when outboxhash (setf (gethash outboxhash msgs) t))
        (when balancehash (setf (gethash balancehash msgs) t))
        (when feeandbal
          (when feemsg (setf (gethash feemsg msgs) t))
          (when feebal (setf (gethash feebal msgs) t)))
        (when percent
          (setf (gethash storagefeemsg msgs) t
                (gethash fracmsg msgs) t))
        (dolist (fee fees-msgs)
          (setf (gethash fee msgs) t))

        (dolist (req reqs)
          (let ((onemsg (get-parsemsg req))
                (oneargs (match-serverreq client req)))
            (cond ((equal (getarg $REQUEST oneargs) $COUPONENVELOPE)
                   (when coupon
                     (error "Multiple coupons returned from server"))
                   (setq coupon onemsg
                         encrypted-coupon (getarg $ENCRYPTEDCOUPON oneargs)))
                  (t
                   (let ((m (trim (get-parsemsg (getarg $MSG oneargs)))))
                     (typecase (gethash m msgs)
                       (null (error "Returned message wasn't sent: ~s" m))
                       (string (error "Duplicate returned message: ~s" m)))
                     (setf (gethash m msgs) onemsg))))))

        (loop
           for m being the hash-key using (hash-value msg) of msgs
           do
           (when (eq msg t)
             (error "Message not returned from spend: ~s" m)))
          
        ;; Do the second phase of the commit
        (when two-phase-commit-p
          (setf last-transaction (send-commit-msg client time)))

        ;; All is well. Commit this baby.
        (setf (db-get db (userbalancekey client acct assetid))
              (gethash balance msgs))
        (when tobalance
          (setf (db-get db (userbalancekey client toacct assetid))
                (gethash tobalance msgs)))
        (when outboxhash
          (setf (db-get db (useroutboxhashkey client))
                (gethash outboxhash msgs)))
        (when balancehash
          (setf (db-get db (userbalancehashkey client))
                (gethash balancehash msgs)))
        (let ((spend (gethash spend msgs)))
          (when feeandbal
            (dotcat spend "." (gethash feemsg msgs))
            (when feebal
              (setf (db-get db (userbalancekey client $MAIN tranfee-asset))
                    (gethash feebal msgs))))
          (when coupon
            (dotcat spend "." coupon)
            (setf (coupon client) encrypted-coupon))

          (when (and (not (equal id toid))
                     (not (equal id serverid)))
            (setf (db-get db (useroutboxkey client time)) spend))
          (setf (last-spend-time client) time)

          (when percent
            (setf (db-get db (userfractionkey client assetid))
                  (gethash fracmsg msgs)))

          (when last-transaction
            (setf (db-get db (user-last-transaction-key client)) last-transaction))

          (when (keep-history-p client)
            (setf (db-get db (userhistorykey client) time) spend)))))
    (let ((feeamt (cdr (assocequal assetid fees-amounts))))
      `(,@(and feeamt (list :transaction-fee
                            (format-asset-value client feeamt asset)))
        ,@(and storagefee (list :storage-fee
                                (format-asset-value client storagefee asset)))))
    ))

(defmethod reload-asset-p ((client client) assetid)
  "Reload an asset from the server.
   Return true if the storage percent changed."
  (let* ((asset (getasset client assetid))
         (percent (asset-percent asset)))
    (setq asset (getasset client assetid t))
    (not (equal percent (asset-percent asset)))))

(defmethod spendreject ((client client) time &optional note)
  (let ((db (db client))
        (need-init-p t))
    (require-current-server client "In spendreject(): Server not set")
    (init-server-accts client)

    (unwind-protect
         (with-db-lock (db (userreqkey client))
           (prog1 (spendreject-internal client time note)
             (setq need-init-p nil)))
      (when need-init-p
        (forceinit client)))))

(defmethod spendreject-internal ((client client) time note)
  (let* ((db (db client))
         (serverid (serverid client))
         (id (id client))
         toid
         (server (server client))
         (parser (parser client))
         (msg (or (ignore-errors (useroutbox client time))
                  (error "No outbox entry at time: ~s" time)))
         (reqs (parse parser msg)))
    (dolist (req reqs)
      (let* ((args (match-serverreq client req))
             (request (getarg $REQUEST args)))
        (cond ((equal request $ATSPEND)
               (let ((msg (getarg $MSG args)))
                 (setf toid (getarg $ID msg))))
              ((equal request $COUPONENVELOPE)
               (let ((coupon (getarg $ENCRYPTEDCOUPON args)))
                 (when coupon
                   (setq coupon (privkey-decrypt coupon (privkey client)))
                   (return-from spendreject-internal
                     (redeem client coupon))))))))
    (when note
      (setf note (encrypt-note (pubkeydb client) (list id toid) note)))
    (setq msg (apply #'custmsg client $SPENDREJECT serverid time id
                     (and note (list note))))
    (let* ((servermsg (process server msg))
           (args (with-verify-sigs-p (parser t)
                   (unpack-servermsg client servermsg $INBOX)))
           (time (getarg $TIME args))
           (args2 (getarg $MSG args))
           (msg2 (get-parsemsg args2))
           (*msg* msg))
      (unless (equal (trim msg2) (trim *msg*))
        (error "Server return doesn't wrap request"))
      (setf (db-get db (userinboxkey client) time) servermsg))))

(defmethod gethistorytimes ((client client))
  (let ((db (db client)))
    (require-current-server client "In gethistorytimes(): Server not set")
    (sort (db-contents db (userhistorykey client))
          (lambda (x y) (< (bccomp y x) 0)))))

(defmethod gethistoryitems ((client client) time)
  "Get the history items for $time.
   Return nil if there is no corresponding item.
   Otherwise, return a list of matched inner message hash tables."
  (let ((db (db client))
        (parser (parser client)))
    (require-current-server client "In gethistoryitems(): Server not set")
    (let* ((msg (db-get db (userhistorykey client) time)))
      (when msg
        (let ((reqs (parse parser msg))
              res)
          (dolist (req reqs)
            (let* ((args (match-pattern parser req))
                   (inner (getarg $MSG args)))
              (when inner
                (let* ((atrequest (getarg $REQUEST args)))
                  (setq args (match-pattern parser inner))
                  (setf (getarg $ATREQUEST args) atrequest)))
              (let* ((assetid (getarg $ASSET args))
                     (amount (getarg $AMOUNT args)))
                (when (and assetid amount)
                  (let ((asset (getasset client assetid)))
                         (setf (getarg $ASSETNAME args) (asset-name asset)
                               (getarg $FORMATTEDAMOUNT args)
                               (format-asset-value client amount asset nil)))))
              (push args res)))
          (nreverse res))))))

(defmethod removehistoryitem ((client client) time)
  "Remove a history item"
  (let ((db (db client)))
    (require-current-server client "In removehistoryitem(): Server not set")
    (setf (db-get db (userhistorykey client) time) nil)))

(defun history-key (client timestamp)
  (sha1 (strcat "history" (id client) timestamp)))

(defmethod %get-saved-history ((client client) id)
  (ignore-errors
    (readdata client (history-key client id))))

(defmethod (setf %get-saved-history) (value client id)
  (writedata client (history-key client id) (or value ""))
  value)

(defmethod getcoupon ((client client))
  "Return the last coupon resulting from a spend.
   Clear the coupon store, so you can only get the coupon once."
  (let ((coupon (coupon client)))
    (setf (coupon client) nil)
    (and coupon (privkey-decrypt coupon (privkey client)))))

(defstruct inbox
  request
  id
  time
  msgtime
  assetid
  assetname
  amount
  formattedamount
  note
  reply                                 ;used by client-web.lisp
  items)

(defmethod getinbox ((client client) &optional includeraw)
  "Get the inbox contents.
   Returns a list of INBOX instances, sorted by INBOX-TIME.
   If INCLUDERAW is true, will return as a second value a
   hash table mapping those instances to the raw message
   strings from which they came.
   INBOX-REQUEST is $SPEND, $SPENDACCEPT, or $SPENDREJECT,
   INBOX-ID is the ID of the sender of the inbox entry,
   INBOX-TIME is the timestamp from the server on the inbox entry,
   INBOX-MSGTIME is the timestamp in the sender's message,
   INBOX-ASSETID & INBOX-ASSETNAME describe the asset being transferred,
   INBOX-AMOUNT is the amount of the asset being transferred, as an integer,
   INBOX-FORMATTEDAMOUNT is the amount as a decimal number with the scale
   and precision applied,
   INBOX-NOTE is the note that came from the sender
   INBOX-ITEMS is other items from the same inbox entry, e.g. fees."
  (let ((db (db client)))
    (require-current-server client "In getinbox(): Server not set")
    (init-server-accts client)
    (with-db-lock (db (userreqkey client))
      (getinbox-internal client includeraw))))

(defmethod getinbox-internal ((client client) includeraw)
  (let ((db (db client))
        (parser (parser client))
        (serverid (serverid client))
        (res nil)
        (msghash (and includeraw (make-hash-table :test #'eq)))
        (key (userinboxkey client)))
    (sync-inbox client)
    (dolist (time (db-contents db key))
      (let* ((msg (db-get db key time))
             (reqs (parse parser msg))
             last-item)
        (dolist (req reqs)
          (let* ((args (match-serverreq client req))
                 (argstime (getarg $TIME args)))
            (unless (or (null argstime) (equal argstime time))
              (error "Inbox message timestamp mismatch"))
            (setq args (getarg $MSG args))
            (let ((request (getarg $REQUEST args))
                  (id (getarg $CUSTOMER args))
                  (msgtime (getarg $TIME args))
                  (note (getarg $NOTE args))
                  assetid
                  amount
                  assetname
                  formattedamount)
              (cond ((or (equal request $SPEND)
                         (equal request $TRANFEE))
                     (setq assetid (getarg $ASSET args)
                           amount (getarg $AMOUNT args))
                     (let ((asset (ignore-errors (getasset client assetid)))
                           incnegs-p)
                       (when asset
                         (setq assetname (asset-name asset)
                               incnegs-p (not (equal (getarg $CUSTOMER args)
                                                     serverid))
                               formattedamount (format-asset-value
                                                client amount asset incnegs-p)))))
                    ((or (equal request $SPENDACCEPT)
                         (equal request $SPENDREJECT))
                     ;; To do: Pull in data from outbox to get amounts
                     )
                    (t (error "Bad request in inbox: ~s" request)))
              (ignore-errors
                (setf note (decrypt-note (id client) (privkey client) note)))
              (let ((item (make-inbox :request request
                                      :id id
                                      :time time
                                      :msgtime msgtime
                                      :assetid assetid
                                      :assetname assetname
                                      :amount amount
                                      :formattedamount formattedamount
                                      :note note)))
                (cond ((equal request $SPEND)
                       (push item res)
                       (setq last-item item))
                      ((equal request $TRANFEE)
                       (unless last-item
                         (error "tranfee without matching spend"))
                       (push item (inbox-items last-item)))
                      (t (push item res)
                         (setq last-item nil)))
              (when (and includeraw (eq (car res) item))
                (setf (gethash item msghash) msg))))))))
    (values
     (sort res (lambda (t1 t2) (< (bccomp t1 t2) 0)) :key #'inbox-time)
     msghash)))

(defmethod sync-inbox ((client client))
  "Synchronize the current customer inbox with the current server.
   Assumes that there IS a current user and server.
   Does no database locking."
  (handler-case (sync-inbox-internal client)
    (error ()
      (forceinit client)
      (sync-inbox-internal client))))

(defmethod sync-inbox-internal ((client client))
  (let* ((db (db client))
         (serverid (serverid client))
         (parser (parser client))
         (server (server client))
         (msg (custmsg client $GETINBOX serverid (getreq client)))
         (*msg* msg)
         (servermsg (process server msg))
         (reqs (parse parser servermsg))
         (inbox (make-equal-hash))
         (times nil)
         (storagefees (make-equal-hash))
         (last-time nil))
    (dolist (req reqs)
      (let* ((args (match-serverreq client req))
             (servermsg (get-parsemsg req))
             (request (getarg $REQUEST args)))
        (cond ((equal request $ATGETINBOX)
               (let ((retmsg (get-parsemsg (getarg $MSG args))))
                 (unless (equal (trim retmsg) (trim *msg*))
                   (error "getinbox return doesn't wrap message sent"))
                 (setq last-time nil)))
              ((equal request $INBOX)
               (let ((time (getarg $TIME args)))
                 (when (gethash time inbox)
                   (error "getinbox return included multiple entries for time: ~s"
                          time))
                 (setf (gethash time inbox) servermsg
                       last-time time)))
              ((equal request $ATTRANFEE)
               (unless last-time
                 (error "In getinbox return: @tranfee not after inbox"))
               (setf (gethash last-time inbox)
                     (strcat (gethash last-time inbox) "." servermsg)
                     last-time nil))
              ((equal request $TIME)
               (push (getarg $TIME args) times)
               (setq last-time nil))
              ((equal request $STORAGEFEE)
               (let ((assetid (getarg $ASSET args)))
                 (setf (gethash assetid storagefees) servermsg)))
              ((not (equal request $COUPONNUMBERHASH))
               (error "Unknown request in getinbox return: ~s" request)))))

    (let* ((key (userinboxkey client))
           (keys (db-contents db key)))
      (dolist (time keys)
        (let ((inmsg (gethash time inbox)))
          (if inmsg
            (let ((msg (db-get db key time)))
              (unless (equal msg inmsg)
                (error "Inbox mismatch at time: ~s" time))
              (remhash time inbox))
            (setf (db-get db key time) nil))))
      (loop
         for time being the hash-key using (hash-value msg) of inbox
         do
           (setf (db-get db key time) msg)))

    (let ((key (userstoragefeekey client)))
      (dolist (assetid (db-contents db key))
        (unless (gethash assetid storagefees)
          (setf (db-get db key assetid) nil)))
      (loop
         for assetid being the hash-key using (hash-value storagefee) of storagefees
         do
           (setf (db-get db key assetid) storagefee)))

    (when times
      (setf (db-get db (usertimekey client)) (apply #'implode "," times)))))

(defmethod getinboxignored ((client client))
  "Return a list of the timestamps that were ignored in the last processinbox"
  (explode #\, (db-get (db client) (userinboxignoredkey client))))

(defmethod (setf getinboxignored) (list (client client))
  "Return a list of the timestamps that were ignored in the last processinbox"
  (setf (db-get (db client) (userinboxignoredkey client))
        (apply #'implode #\, list))
  list)

(defstruct process-inbox
  time                                  ;timestamp in the inbox
  request                               ;$SPENDACCEPT, SPENDREJECT, or nil
  note                                  ;note for accept or reject
  acct)                                 ;Account into which to transfer

(defmethod processinbox ((client client) directions)
  "Process the inbox contents.
   DIRECTIONS is a list of PROCESS-INBOX instances."
  (let ((db (db client))
        (need-init-p t))
    (require-current-server client "In processinbox(): Server not set")
    (init-server-accts client)

    (unwind-protect
         (with-db-lock (db (userreqkey client))
           (prog1 (processinbox-internal client directions nil)
             (setq need-init-p nil)))
      (when need-init-p (forceinit client)))))

(defmethod processinbox-internal ((client client) directions recursive)
  (let* ((db (db client))
         (serverid (serverid client))
         (id (id client))
         (server (server client))
         (parser (parser client))
         (trans (gettime client))
         (two-phase-commit-p (and (not (equal id serverid))
                                  (two-phase-commit-p client)))
         (last-transaction nil)
         inbox inbox-msgs
         outbox outbox-msgs
         (balance (getbalance-internal client t nil))
         (timelist "")
         (deltas (make-equal-hash)) ;(acct => (asset => delta, ...), ...) 
         (outbox-deletions nil)
         (msg "")
         (msgs (make-equal-hash))
         (history "")
         (hist "")
         (charges (make-equal-hash)))
    (multiple-value-setq (inbox inbox-msgs)
      (getinbox-internal client (keep-history-p client)))
    (multiple-value-setq (outbox outbox-msgs)
      (getoutbox-internal client (keep-history-p client)))
    (dolist (dir directions)
      (let* ((time (process-inbox-time dir))
             (request (process-inbox-request dir))
             (note (or (process-inbox-note dir) ""))
             (acct (or (process-inbox-acct dir) $MAIN))
             (in (or (find time inbox :test #'equal :key #'inbox-time)
                     (error "No inbox entry for time: ~s" time)))
             (fee (car (inbox-items in))) ;change this when I add multiple fees
             (inmsg (and inbox-msgs (gethash in inbox-msgs)))
             (inreq (inbox-request in))
             (delta (get-inited-hash acct deltas)))

        (unless (equal "" timelist) (dotcat timelist "|"))
        (dotcat timelist time)

        (cond ((equal inreq $SPEND)
               (let ((id (inbox-id in))
                     (assetid (inbox-assetid in))
                     (msgtime (inbox-msgtime in))
                     (amount (inbox-amount in)))
                 (setf note
                       (encrypt-note (pubkeydb client) (list (id client) id) note))
                 (unless (equal msg "") (dotcat msg "."))
                 (cond ((equal request $SPENDACCEPT)
                        (setq amount
                              (do-storagefee
                                  client charges amount msgtime trans assetid))
                        (setf (gethash assetid delta)
                              (bcadd (gethash assetid delta 0) amount))
                        (let ((smsg (custmsg client $SPENDACCEPT serverid
                                             msgtime id note)))
                          (setf (gethash smsg msgs) t)
                          (dotcat msg smsg)
                          (when inmsg
                            (dotcat hist "." smsg "." inmsg))))
                       ((equal request $SPENDREJECT)
                        (when fee
                          (let ((feeasset (inbox-assetid fee)))
                            (setf (gethash feeasset delta)
                                  (bcadd (gethash feeasset delta 0)
                                         (inbox-amount fee)))))
                        (let ((smsg (custmsg client $SPENDREJECT serverid
                                             msgtime id note)))
                          (setf (gethash smsg msgs) t)
                          (dotcat msg smsg)
                          (when inmsg
                            (dotcat hist "." smsg "." inmsg))))
                       (t (error "Illegal request for spend: ~s" request)))))
              ((or (equal inreq $SPENDACCEPT) (equal inreq $SPENDREJECT))
               (let* ((msgtime (inbox-msgtime in))
                      (outspend (or (find msgtime outbox
                                          :test #'equal :key #'outbox-time)
                                    (error "Can't find outbox for ~s at time ~s"
                                           inreq msgtime)))
                      (outfee (car (outbox-items outspend)))
                      (outmsg (and outbox-msgs (gethash outspend outbox-msgs))))
                 (push msgtime outbox-deletions)
                 (cond ((equal inreq $SPENDREJECT)
                        ;; For rejected spends, we get our money back
                        (let ((assetid (outbox-assetid outspend))
                              (amount (outbox-amount outspend)))
                          (setq amount
                                (do-storagefee
                                    client charges amount msgtime trans assetid))
                          (setf (gethash assetid delta)
                                (bcadd (gethash assetid delta 0) amount))))
                       (outfee
                        ;; For accepted spends, we get our tranfee back
                        (let ((feeasset (outbox-assetid outfee)))
                          (setf (gethash feeasset delta)
                              (bcadd (gethash feeasset delta 0)
                                     (outbox-amount outfee))))))
                 (when outmsg
                   (dotcat hist "." inmsg "." outmsg))))
              (t "Unrecognized inbox request: ~s" inreq))))

    (let ((pmsg (custmsg client $PROCESSINBOX serverid trans timelist))
          (acctbals (make-equal-hash))
          (outboxhash nil)
          (balancehash nil)
          (fracmsgs nil))
      (setf (gethash pmsg msgs) t)
      (setq msg (if (equal msg "") pmsg (dotcat pmsg "." msg)))
      (when (keep-history-p client)
        (setq history (strcat pmsg hist)))

      ;; Compute fees for new balance files
      (let* ((tranfee (getfees client))
             (feeasset (fee-assetid tranfee))
             (delta-main (get-inited-hash $MAIN deltas)))
        (loop
           for acct being the hash-key using (hash-value amounts) of deltas
           for bals = (cdr (assoc acct balance :test #'equal))
           do
           (loop
              for assetid being the hash-key of amounts
              for oldbal = (find assetid bals
                                 :test #'equal :key #'balance-assetid)
              for oldamount = (and oldbal (balance-amount oldbal))
              do
                (when (and oldamount (> (bccomp oldamount 0) 0))
                  (let ((oldtime (balance-time oldbal)))
                    (setf oldamount (do-storagefee
                                        client charges oldamount oldtime
                                        trans assetid)
                          (balance-amount oldbal) oldamount)))
                (unless oldamount
                  (setf (gethash feeasset delta-main)
                        (bcsub (gethash feeasset delta-main 0) 1))))))

      ;; Create balance, outboxhash, and balancehash messages
      (loop
         for acct being the hash-key using (hash-value amounts) of deltas
         for bals = (cdr (assoc acct balance :test #'equal))
         for acctbal = (get-inited-hash acct acctbals)
         do
         (loop
            for assetid being the hash-key using (hash-value amount) of amounts
            for bal = (find assetid bals :test #'equal :key #'balance-assetid)
            for oldamount = (if bal (balance-amount bal) 0)
            for sum = (bcadd oldamount amount)
            for balmsg = (custmsg client $BALANCE serverid trans assetid sum acct)
            do
              (setf (gethash balmsg msgs) t
                    (gethash assetid acctbal) balmsg)
              (dotcat msg "." balmsg)))

      (unless (equal id serverid)
        (when outbox-deletions
          (setf outboxhash (outboxhashmsg client trans
                                          :removed-times outbox-deletions
                                          :two-phase-commit-p two-phase-commit-p)
                (gethash outboxhash msgs) t)
          (dotcat msg "." outboxhash))

        (setf balancehash (balancehashmsg client trans acctbals two-phase-commit-p)
              (gethash balancehash msgs) t)
        (dotcat msg "." balancehash))

      ;; Add storage and fraction messages
      (loop
         for assetid being the hash-key using (hash-value assetinfo) of charges
         for percent = (assetinfo-percent assetinfo)
         do
           (when percent
             (let* ((storagefee (assetinfo-storagefee assetinfo))
                    (fraction (assetinfo-fraction  assetinfo))
                    (storagefeemsg (custmsg client $STORAGEFEE serverid
                                            trans assetid storagefee))
                    (fracmsg (custmsg client $FRACTION serverid
                                      trans assetid fraction)))
               (unless fracmsgs (setq fracmsgs (make-equal-hash)))
               (setf (gethash storagefeemsg msgs) t
                     (gethash fracmsg msgs) t
                     (gethash assetid fracmsgs) fracmsg)
               (dotcat msg "." storagefeemsg "." fracmsg))))

      (let* ((retmsg (process server msg)) ;send request to server
             (reqs (parse parser retmsg t)))
        ;; Validate return from server
        (handler-case (match-serverreq client (car reqs) $ATPROCESSINBOX)
          (error ()
            (let ((args
                   (handler-case (match-serverreq client (car reqs))
                     (error (c)
                       (unless recursive
                         (with-verify-sigs-p (parser t)
                           ;; Force reload of balances and outbox
                           (forceinit client)
                           ;; Force reload of assets
                           (when charges
                             (loop
                                for assetid being the hash-keys of
                                charges
                                do
                                  (reload-asset-p client assetid)))
                           (return-from processinbox-internal
                             (processinbox-internal client directions t))))
                       (error "Error from processinbox request: ~a" c)))))
              (error "Processinbox request returned unknown message type: ~s"
                     (getarg $REQUEST args)))))
        (dolist (req reqs)
          (let* ((reqmsg (get-parsemsg req))
                 (args (match-serverreq client req))
                 (m (trim (get-parsemsg (getarg $MSG args))))
                 (msgm (gethash m msgs)))
            (unless msgm (error "Returned message wasn't sent: ~s" m))
            (when (stringp msgm) (error "Duplicate returned message: ~s" m))
            (setf (gethash m msgs) reqmsg)))

        (loop
           for m being the hash-key using (hash-value msg) of msgs
           do
             (when (eq msg t)
               (error "Message not returned from processinbox: ~s" m)))

        ;; Do the second phase of the commit
        (when two-phase-commit-p
          (setf last-transaction (send-commit-msg client trans)))

        ;; Commit to database
        (loop
           for acct being the hash-key using (hash-value bals) of acctbals
           do
             (loop
                for asset being the hash-key using (hash-value balmsg) of bals
                do
                  (setf (db-get db (userbalancekey client acct asset))
                        (gethash balmsg msgs))))

        (when fracmsgs
          (loop
             for assetid being the hash-key using (hash-value fracmsg) of fracmsgs
             for key = (userfractionkey client assetid)
             do
               (setf (db-get db key) (gethash fracmsg msgs))))

        (when outboxhash
          (dolist (outbox-time outbox-deletions)
            (setf (db-get db (useroutboxkey client outbox-time)) nil))
          (setf (db-get db (useroutboxhashkey client)) (gethash outboxhash msgs)))

        (setf (db-get db (userbalancehashkey client)) (gethash balancehash msgs))

        (when last-transaction
          (setf (db-get db (user-last-transaction-key client)) last-transaction))

        (when history
          (let ((key (userhistorykey client)))
            (setf (db-get db key trans) history)))))))

(defmethod get-last-transaction ((client client) &optional forceserver)
  "Returns the signed commit message for the last two-phase transaction."
  (let* ((db (db client))
         (key (user-last-transaction-key client)))
    (require-current-server client "In get-last-transaction(): Server not set")
    (unless (two-phase-commit-p client)
      (error "Server doesn't support two-phase commit"))
    (with-db-lock (db (userreqkey client))
      (let ((msg (unless forceserver (db-get db key))))
        (unless msg
          (setf msg (sendmsg
                     client $LASTTRANSACTION (serverid client) (getreq client))
                forceserver t))
        ;; We get an error if there is no last commit
        (let ((args (ignore-errors (unpack-servermsg client msg $ATCOMMIT))))
          (when forceserver (setf (db-get db key) (and args msg)))
          (when args
            (getarg $TIME (getarg $MSG args))))))))

(defmethod storagefees ((client client))
  "Tell server to move storage fees to inbox
   You need to call getinbox to see the new data (via its call to sync_inbox)."
  (let ((db (db client)))
    (require-current-server client "In storagefees(): Server not set")
    (init-server-accts client)
    (with-db-lock (db (userreqkey client))
      (let* ((serverid (serverid client))
             (server (server client))
             (req (getreq client))
             (msg (custmsg client $STORAGEFEES serverid req))
             (servermsg (process server msg))
             (args (unpack-servermsg client servermsg))
             (request (getarg $REQUEST args)))
        (unless (equal request $ATSTORAGEFEES)
          (error "Unknown response type: ~s" request))))))

(defstruct assetinfo
  percent
  fraction
  storagefee
  digits)

(defmethod do-storagefee ((client client) charges amount msgtime time assetid)
  "Add storage fee for AMOUNT/MSGTIME to
   (STORAGEINFO-STORAGEFEE (GETHASH ASSETID CHARGES))
   and set (STORAGEINFO-FRACTION (GETHASH ASSETID CHARGES))
   to the fractional balance.
   Return the updated AMOUNT."
  (when (> (bccomp amount 0) 0)
    (let ((assetinfo (gethash assetid charges))
          (digits nil)
          (fracfee nil))
      (unless assetinfo
        (multiple-value-bind (percent fraction fractime)
            (client-storage-info client assetid)
        (when percent
          (setq digits (fraction-digits percent)
                fracfee 0)
          (when fraction
            (multiple-value-setq (fracfee fraction)
              (storage-fee fraction fractime time percent digits))))
        (setf assetinfo (make-assetinfo
                         :percent percent
                         :fraction fraction
                         :storagefee fracfee
                         :digits digits)
              (gethash assetid charges) assetinfo)))
      (let ((percent (assetinfo-percent assetinfo)))
        (when percent
          (let ((digits (assetinfo-digits assetinfo))
                (storagefee (assetinfo-storagefee assetinfo))
                (fraction (assetinfo-fraction assetinfo))
                fee)
            (wbp (digits)
              (multiple-value-setq (fee amount)
                (storage-fee amount msgtime time percent digits))
              (setf (assetinfo-storagefee assetinfo) (bcadd storagefee fee))
              (when fraction
                (multiple-value-setq (amount fraction)
                  (normalize-balance amount fraction digits)))
              (setf (assetinfo-fraction assetinfo) fraction)))))))
  amount)

(defstruct outbox
  time
  id
  request
  assetid
  assetname
  amount
  formattedamount
  note
  items
  coupons)

(defmethod getoutbox ((client client) &optional includeraw)
  "Get the outbox contents.
   Returns a list of OUTBOX instances:
   TIME is the timestamp of the outbox entry.
   REQUEST is $SPEND, $TRANFEE, or $COUPONENVELOPE.
   ASSETID is the ID of the asset transferred.
   ASSETNAME is the name of ASSETID.
   AMOUNT is the amount transferred.
   FORMATTEDAMOUNT is amount formatted for output.
   NOTE is the transfer note, omitted for tranfee.
   ITEMS is a list of OUTBOX instances for the fees for this spend.
   COUPONs is a list of coupons in this spend."
  (let ((db (db client)))
    (require-current-server client "In getoutbox(): Server not set")
    (init-server-accts client)
    (with-db-lock (db (userreqkey client))
      (getoutbox-internal client includeraw))))

(defmethod getoutbox-internal ((client client) &optional includeraw)
  (let* ((db (db client))
         (parser (parser client))
         (serverid (serverid client))
         (res nil)
         (msghash (and includeraw (make-hash-table :test #'eq)))
         (key (useroutboxkey client))
         (outbox (db-contents db key)))
    (dolist (time outbox)
      (let* ((msg (db-get db key time))
             (reqs (parse parser msg t))
             (item nil)
             (items nil)
             (coupons nil))
        (dolist (req reqs)
          (let* ((args (match-serverreq client req))
                 (request (getarg $REQUEST args))
                 (incnegs t)
                 assetid
                 amount
                 assetname
                 formattedamount
                 id
                 outbox)
            (unless (equal request $COUPONENVELOPE)
              (setq args (getarg $MSG args))
              (unless (equal (getarg $TIME args) time)
                (error "Outbox message timestamp mismatch")))
            (setq id (getarg $ID args)
                  request (getarg $REQUEST args)
                  assetid (getarg $ASSET args)
                  amount (getarg $AMOUNT args))
            (when (equal id serverid) (setq incnegs nil))
            (when assetid
              (let ((asset (getasset client assetid)))
                (setq assetname (asset-name asset)
                      formattedamount (format-asset-value
                                       client amount asset incnegs))))
            (setq outbox
                  (make-outbox
                   :time time
                   :id id
                   :request request
                   :assetid assetid
                   :assetname assetname
                   :amount amount
                   :formattedamount formattedamount))

            (cond ((equal request $SPEND)
                   (when item
                     (error "More than one spend message in an outbox item"))
                   (setf item outbox)
                   (let ((note (getarg $NOTE args)))
                     (when note
                       (ignore-errors
                         (setf note
                           (decrypt-note (id client) (privkey client) note)))
                       (setf (outbox-note item) note))))                           
                  ((equal request $TRANFEE)
                   (push outbox items))
                  ((equal request $COUPONENVELOPE)
                   (let* ((coupon (privkey-decrypt
                                   (or (getarg $ENCRYPTEDCOUPON args)
                                       (error "No encryptedcoupon in a coupon"))
                                   (privkey client)))
                          (args (unpack-servermsg client coupon $COUPON))
                          (url (getarg $SERVERURL args))
                          (coupon-number (getarg $COUPON args)))
                     (push (format nil "[~a, ~a]" url coupon-number)
                           coupons)))
                  (t (error "Bad request in outbox: ~s" request)))))
        (unless item
          (error "No spend found in outbox item"))
        (setf (outbox-items item) items
              (outbox-coupons item) coupons)
        (push item res)
        (when includeraw
          (setf (gethash item msghash) msg))))
    (values
     (sort res (lambda (x y) (< (bccomp x y) 0))
           :key #'outbox-time)
     msghash)))

(defmethod redeem ((client client) coupon)
  "Redeem a coupon
   If successful, add an inbox entry for the coupon spend and return false.
   If fails, return error message.
   Needs an option to process the coupon, intead of just adding it to
   the inbox."
  (let* ((serverid (serverid client))
         (pubkey (or (db-get (pubkeydb client) serverid)
                     (error "Can't get server public key")))
         (coupon (pubkey-encrypt coupon pubkey))
         (msg (sendmsg client $COUPONENVELOPE serverid coupon)))
    (unpack-servermsg client msg $ATCOUPONENVELOPE))
  nil)

(defmethod getfeatures ((client client) &optional forceserver)
  "Returns a list of server features."
  (let* ((db (db client))
         (key (serverkey client $FEATURES)))
    (require-current-server client "In getfeatures(): Server not set")
    (with-db-lock (db (userreqkey client))
      (let ((msg (unless forceserver (db-get db key))))
        (unless msg
          (setq msg (sendmsg client $GETFEATURES (serverid client) (getreq client))
                forceserver t))
        ;; the "getfeatures" command isn't supported by older servers,
        ;; so ignore errors.
        (let ((args (ignore-errors (unpack-servermsg client msg $FEATURES))))
          (when forceserver (setf (db-get db key) msg))
          (and args
               (split-sequence:split-sequence #\| (getarg $FEATURES args))))))))

(defmethod two-phase-commit-p ((client client))
  "Return true if the current server for CLIENT supports two phase commit."
  (not (null (member $TWOPHASECOMMIT (getfeatures client) :test #'equal))))

(defmethod getversion ((client client) &optional forceserver)
  "Returns two values: version & time."
  (let* ((db (db client))
         (key (userversionkey client)))
    (require-current-server client "In getversion(): Server not set")
    (with-db-lock (db (userreqkey client))
      (let ((msg (unless forceserver (db-get db key))))
        (unless msg
          (setq msg (sendmsg client $GETVERSION (serverid client) (getreq client))
                forceserver t))
        (let ((args (unpack-servermsg client msg $VERSION)))
          (when forceserver (setf (db-get db key) msg))
          (values (getarg $VERSION args) (getarg $TIME args)))))))

(defmethod readdata ((client client) key &key
                     anonymous-p size-p serverurl)
  (unless anonymous-p
    (require-current-server client "In readdata(): Server not set"))
  (let* ((serverid (or (and anonymous-p
                          serverurl
                          (verify-server client serverurl))
                     (serverid client)
                     (error "Can't determine serverid")))
         (size-arg (and size-p (list "Y")))
         (msg (if anonymous-p
                  (strcat
                   (apply #'makemsg (parser client)
                          "0" $READDATA serverid "0" key size-arg)
                   ":0")
                 (apply #'custmsg client
                        $READDATA serverid (getreq client) key size-arg)))
         (server (if (and anonymous-p serverurl)
                     (make-server-proxy client serverurl)
                     (server client)))
         (save-serverid (prog1 (serverid client)
                        (setf (serverid client) serverid)))
         (servermsg (process server msg))
         (args (unwind-protect (unpack-servermsg client servermsg)
                 (setf (serverid client) save-serverid)))
         (request (getarg $REQUEST args))
         (reqid (getarg $ID args))
         (time (getarg $TIME args))
         (data (getarg $DATA args)))
    (unless (equal request $ATREADDATA)
      (error "Unknown response type: ~s, expected: ~s" request $ATREADDATA))
    (unless (equal (if anonymous-p "0" (id client)) reqid)
      (error "Wrong id returned from readdata"))
    (values data time)))

(defmethod writedata ((client client) key data &optional anonymous-p)
  (require-current-server client "In writedata(): Server not set")
  (handler-case (writedata-internal client key data anonymous-p)
    (error ()
      (forceinit client)
      (writedata-internal client key data anonymous-p))))

(defmethod writedata-internal ((client client) key data anonymous-p)
  (let ((db (db client)))
    (with-db-lock (db (userreqkey client))
      (let* ((oldsize (ignore-errors
                        (parse-integer (readdata client key
                                                 :anonymous-p anonymous-p
                                                 :size-p t))))
             (old-cost (if oldsize (data-cost oldsize) 0))
             (new-cost (data-cost data))
             (net-cost (- new-cost old-cost))
             (tokenid (fee-assetid (getfees client)))
             (bal (balance-amount (or (getbalance client $MAIN tokenid)
                                      (error "Insufficient tokens"))))
             (newbal (bcsub bal net-cost)))
        (unless (or (< (bccomp bal 0) 0) (>= (bccomp newbal 0) 0))
          (error "Insufficient balance, need ~a tokens" net-cost))
        (let* ((time (gettime client))
               (serverid (serverid client))
               (anonymous (if anonymous-p "T" ""))
               (msg (custmsg client $WRITEDATA serverid time anonymous key data))
               (balmsg (custmsg client $BALANCE serverid time tokenid newbal))
               (acctbals (make-equal-hash $MAIN (make-equal-hash tokenid newbal)))
               (balhashmsg (balancehashmsg client time acctbals))
               (servermsg (process (server client)
                                 (strcat msg "." balmsg "." balhashmsg)))
               (reqs (parse (parser client) servermsg t))
               (args (match-serverreq client (car reqs) $ATWRITEDATA)))
          (unless (and (equal (getarg $ID args) (id client))
                       (equal (getarg $TIME args) time)
                       (equal (getarg $ANONYMOUS args) anonymous)
                       (equal (getarg $KEY args) key))
            (error "Bad return message from server"))
          (unless (eql 3 (length reqs))
            (error "Wrong number of return messages"))
          (let* ((balreq (second reqs))
                 (balhashreq (third reqs))
                 (serverbalmsg (get-parsemsg balreq))
                 (serverbalhashmsg (get-parsemsg balhashreq)))
            (unless (equal balmsg
                           (get-parsemsg
                            (getarg
                             $MSG (match-serverreq client balreq $ATBALANCE))))
              (error "Returned balance message mismatch"))
            (unless (equal balhashmsg
                           (get-parsemsg
                            (getarg
                             $MSG (match-serverreq client balhashreq $ATBALANCEHASH))))
              (error "Returns balancehash message mismatch"))
            (setf (db-get db (userbalancekey client $MAIN tokenid)) serverbalmsg
                  (db-get db (userbalancehashkey client)) serverbalhashmsg)
            data))))))

(defstruct permission
  id
  toid
  permission
  grant-p
  time)

(defmethod get-permissions ((client client) &optional permission reload-p)
  "Return a list of the PERMISSION instances for PERMISSION, or all if
   PERMISSION is nil.
   If PERMISSION is included, and the server doesn't require it, return T.
   If PERMISSION is included, return a second value, true if the
   user has permission to grant PERMISSION.
   If RELOAD-p is true, reload all permissions from the server."
  (require-current-server client "In get-permissions(): Server not set")
  (let* ((db (db client))
         (id (id client))
         (serverid (serverid client))
         (serverp (equal id serverid))
         (parser (parser client)))
    (when reload-p
      (with-db-lock (db (userreqkey client serverid))
        (handler-case
            (get-permissions-internal client id)
          (error ()
            (get-permissions-internal client id t)))))
    (flet ((permission-key (permission)
             (if serverp
                 (server-permission-key client permission)
                 (user-permission-key client permission))))
      (declare (dynamic-extent #'permission-key))
      (let* ((msgs (cond (permission
                          (list
                           (or (db-get db (permission-key permission))
                               (db-get db (server-permission-key
                                           client permission)))))
                         (t (loop for permission in
                                 (union 
                                  (db-contents
                                   db (server-permission-key client))
                                  (unless serverp
                                    (db-contents
                                     db (user-permission-key client)))
                                  :test #'equal)
                               for msg = (or (db-get
                                              db (permission-key permission))
                                             (unless serverp
                                               (db-get
                                                db (server-permission-key
                                                    client permission))))
                               collect msg))))
             (grant-p nil)
             (server-permissions nil)
             (permissions nil))
        (dolist (msg msgs)
          (let ((reqs (and msg (parse parser msg))))
            (dolist (req reqs)
              (let* ((args (match-serverreq client req)))
                (setf args (getarg $MSG args))
                (unless (equal $GRANT (getarg $REQUEST args))
                  (error "Malformed grant record"))
                (let ((permission (make-permission
                                   :id (getarg $CUSTOMER args)
                                   :toid (getarg $ID args)
                                   :permission (getarg $PERMISSION args)
                                   :grant-p (equal $GRANT
                                                   (getarg $grant args))
                                   :time (getarg $TIME args))))
                  (cond ((equal (permission-toid permission) id)
                         (when (blankp (permission-time permission))
                           ;; Default permission. Clear id.
                           (setf (permission-id permission) nil))
                         (push permission permissions)
                         (when (permission-grant-p permission)
                           (setf grant-p t)))
                        ((equal (permission-toid permission) serverid)
                         (setf (permission-id permission) nil
                               (permission-toid permission) nil
                               (permission-grant-p permission) nil)
                         (push permission server-permissions))
                        (t (error "found permission for bad id"))))))))
        (if permission
            (values (or permissions (not server-permissions))
                    grant-p)
            (append permissions server-permissions))))))

(defun get-permissions-internal (client id &optional reinit-p)
  (let* ((db (db client))
         (serverid (serverid client))
         (key (if (equal serverid id)
                  (server-permission-key client)
                  (user-permission-key client)))
         (permissions (db-contents db key))
         (req (getreq client reinit-p))
         (msg (custmsg client $PERMISSION serverid req))
         (*msg* msg)
         (servermsg (process (server client) msg))
         (parser (parser client))
         (reqs (parse parser servermsg))
         (args (match-serverreq client (car reqs) $ATPERMISSION))
         (newmsgs (make-equal-hash)))
    (unless (equal *msg* (get-parsemsg (getarg $MSG args)))
      (error "Malformed response from server for ~s command."
             $PERMISSION))
    (dolist (req (cdr reqs))
      (let* ((args (match-serverreq client req $ATGRANT))
             (msg (get-parsemsg args))
             toid)
        (setf args (getarg $MSG args)
              toid (getarg $ID args))
        (unless (and (equal $GRANT (getarg $REQUEST args))
                     (let ((toid (getarg $ID args)))
                       (or (equal toid id)
                           (equal toid serverid))))
          (error "Malformed ~s message from server." $GRANT))
        (let* ((permission (getarg $PERMISSION args))
               (permkey (if (equal toid serverid)
                            (server-permission-key client permission)
                            (user-permission-key client permission)))
               (newmsg (gethash permkey newmsgs)))
          (unless (and (equal toid serverid)
                       (not (equal toid (id client))))
            (setf permissions (delete permission permissions :test #'equal)))
          (setf (gethash permkey newmsgs)
                (if newmsg (strcat newmsg "." msg) msg)))))
    (maphash (lambda (permkey msg) (db-put db permkey msg)) newmsgs)
    (dolist (permission permissions)
      (setf (db-get db key permission) nil))))

(defmethod get-granted-permissions ((client client))
  "Return the permissions you've directly granted as a list of PERMISSIONS."
  (let* ((db (db client)))
    (with-db-lock (db (userreqkey client))
      (handler-case
          (get-granted-permissions-internal client)
        (error () (get-granted-permissions-internal client t))))))

(defun get-granted-permissions-internal (client &optional reinit-p)
  (let* ((req (getreq client reinit-p))
         (id (id client))
         (serverid (serverid client))
         (parser (parser client))
         (msg (custmsg client $PERMISSION serverid req $GRANT))
         (*msg* msg)
         (servermsg (process (server client) msg))
         (reqs (parse parser servermsg))
         (args (getarg $MSG (match-serverreq client (car reqs) $ATPERMISSION)))
         (res nil))
    (unless (equal *msg* (get-parsemsg args))
      (error "Malformed return from server for ~s command" $PERMISSION))
    (dolist (req (cdr reqs))
      (setf args (getarg $MSG (match-serverreq client req $ATGRANT)))
      (unless (and (equal $GRANT (getarg $REQUEST args))
                   (equal id (getarg $CUSTOMER args)))
        (error "Malformed ~s message from server" $GRANT))
      (push (make-permission
             :id id
             :toid (getarg $ID args)
             :permission (getarg $PERMISSION args)
             :grant-p (equal $GRANT (getarg $GRANT args))
             :time (getarg $TIME args))
            res))
    (nreverse res)))
      
(defmethod grant ((client client) toid permission &optional grantp)
  "Grant PERMISSION to TOID, with transitive grant permission if GRANTP is true."
  (let* ((db (db client))
         (id (id client))
         (serverid (serverid client))
         (serverp (equal id serverid)))
    (unless (or (equal id serverid) (not (equal toid serverid)))
      (error "You may not grant permissions to the server"))
    (unless (or serverp
                (nth-value 1 (get-permissions client permission))
                (nth-value 1 (get-permissions client permission t)))
      (error "You do not have permission to grant permission: ~s" permission))
    (when (equal toid serverid)
      ;; Could error here, but why bother
      (setf grantp t))
    (with-db-lock (db (userreqkey client))
      (handler-case (grant-internal client toid permission grantp)
        (error () (grant-internal client toid permission grantp t))))))

(defun grant-internal (client toid permission grantp &optional forcenew)
  (let* ((time (gettime client forcenew))
         (serverid (serverid client))
         (msg (apply #'custmsg
                     client $GRANT serverid time toid permission
                     (and grantp (list $GRANT))))
         (servermsg (process (server client) msg))
         (args (unpack-servermsg client servermsg $ATGRANT)))
    (unless (equal msg (get-parsemsg (getarg $MSG args)))
      (error "Malformed return from server for ~s command" $GRANT))))

(defmethod deny ((client client) toid permission)
  "Deny PERMISSION to TOID."
  (let* ((db (db client))
         (id (id client))
         (serverid (serverid client))
         (serverp (equal id serverid)))
    (unless (or (equal id serverid) (not (equal toid serverid)))
      (error "You may not grant permissions to the server"))
    (unless (or serverp
                (nth-value 1 (get-permissions client permission))
                (nth-value 1 (get-permissions client permission t)))
      (error "You do not have permission to deny permission: ~s" permission))
    (with-db-lock (db (userreqkey client))
      (handler-case (deny-internal client toid permission)
        (error () (deny-internal client toid permission t))))))

(defun deny-internal (client toid permission &optional reinit-p)
  (let* ((req (getreq client reinit-p))
         (serverid (serverid client))
         (msg (custmsg client $DENY serverid req toid permission))
         (*msg* msg)
         (servermsg (process (server client) msg))
         (args (unpack-servermsg client servermsg $ATDENY)))
    (unless (equal *msg* (get-parsemsg (getarg $MSG args)))
      (error "Malformed return from server for ~s command" $DENY))))

(defmethod audit ((client client) assetid)
  "Audit the asset with ASSETID. Return three values:
   1) The formatted total
   2) The fractional total
   3) The raw total (arg 1 as an integer string)."
  (require-current-server client "In audit(): Server not set")
  (let ((serverid (serverid client))
        (id (id client))
        (asset (getasset client assetid)))
    (unless (and asset
                 (or (equal id serverid)
                     (equal id (asset-id asset))))
      (error "Audit only allowed by asset issuer"))
    (handler-case
        (audit-internal client assetid asset)
      (error ()
        (audit-internal client assetid asset t)))))

(defun audit-internal (client assetid asset &optional reinit-p)
  (let* ((serverid (serverid client))
         (req# (getreq client reinit-p))
         (msg (custmsg
               client $AUDIT serverid req# assetid))
         (*msg* msg)
         (servermsg (process (server client) msg))
         (args (unpack-servermsg client servermsg $ATAUDIT serverid))
         (reqs (getarg $UNPACK-REQS-KEY args))
         (parser (parser client))
         amount
         (fraction "0"))
    (unless (equal *msg* (get-parsemsg (getarg $MSG args)))
      (error "Server return doesn't wrap request message"))
    (dolist (req (cdr reqs))
      (let* ((args (match-pattern parser req serverid))
             (op (getarg $REQUEST args)))
        (assert (equal serverid (getarg $CUSTOMER args)))
        (assert (equal serverid (getarg $SERVERID args)))
        (assert (equal req# (getarg $TIME args)))
        (assert (equal assetid (getarg $ASSET args)))
        (cond ((equal op $BALANCE)
               (setf amount (getarg $AMOUNT args)))
              ((equal op $FRACTION)
               (setf fraction (getarg $FRACTION args)))
              (t (error "Unknown operation in ~s return: ~s" $AUDIT op)))))
    (values (format-value
             (if (< (bccomp amount 0) 0) (bcsub amount 1) amount)
             (asset-scale asset) (asset-precision asset))
            fraction
            amount)))

(defmethod backup ((client client) &rest keys&values)
  (backup* client keys&values))

(defmethod backup* ((client client) keys&values)
  (require-current-server client "In backup*(): Server not set")
  (unless (evenp (length keys&values))
    (error "odd length keys&values list"))
  (let* ((req (getreq client))
         (msg (apply #'sendmsg client $BACKUP req keys&values))
         (args (unpack-servermsg client msg $ATBACKUP))
         (id (getarg $CUSTOMER args))
         (msgreq (getarg $REQ args)))
    (unless (equal id (serverid client))
      (error "Return from backup request not from server."))
    (unless (equal req msgreq)
      (error "Mistmatch in req from backup request, sb: ~s, was: ~s"
             req msgreq))))

;;;
;;; End of API methods
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod tokenid ((client client))
  (fee-assetid (getfees client)))
*/
	
	public String passphraseHash (String passphrase) {
		return Crypto.sha1(passphrase);
	}

/*
(defmethod custmsg ((client client) &rest args)
  "Create a signed customer message.
   Takes an arbitrary number of args."
  (let* ((id (id client))
         (parser (parser client))
         (privkey (privkey client))
         (args (cons id args))
         (msg (apply #'makemsg parser args))
         (sig (sign msg privkey)))
    (trim (format nil "~a:~%~a~%" msg sig))))

(defmethod sendmsg ((client client) &rest args)
  "Send a customer message to the server.
   Takes an arbitrary number of args."
  (let ((server (server client))
        (msg (apply #'custmsg client args)))
    (process server msg)))

(defmethod unpack-servermsg ((client client) msg &optional request serverid)
  "Unpack a server message.
   Return a string if parse error or fail from server.
   This is called via the $unpacker arg to utility->dirhash & balancehash."
  (let* ((parser (parser client))
         (reqs (parse parser msg))
         (req (car reqs))
         (args (match-serverreq client req request serverid)))
    (setf (getarg $UNPACK-REQS-KEY args) reqs) ;; save parse results
    args))

(defmethod match-serverreq ((client client) req &optional request serverid)
  "Unpack a server message that has already been parsed."
  (unless (not (blankp serverid)) (setq serverid (serverid client)))
  (let* ((parser (parser client))
         (args (match-pattern parser req serverid)))
    (unless (or (not serverid) (equal (getarg $CUSTOMER args) serverid))
      (error "Return message not from server"))
    (when (equal (getarg $REQUEST args) $FAILED)
      (error "Server error: ~a" (getarg $ERRMSG args)))
    (when (and request (not (equal (getarg $REQUEST args) request)))
      (error "Wrong return type from server; sb: ~s, was: ~s"
             request (getarg $REQUEST args)))
    (let* ((msg (getarg $MSG args))
           (msgargs (and msg (match-pattern parser (getarg $MSG args)))))
      (when msgargs
        (let ((msgargs-serverid (getarg $SERVERID msgargs)))
          (when (and msgargs-serverid (not (equal msgargs-serverid serverid)))
            (error "While matching server-wrapped msg: serverid mismatch")))
        (setf (getarg $MSG args) msgargs)))
    args))

(defmethod client-storage-info ((client client) assetid)
  "Get the values necessary to compute the storage fee.
   Returns three values:
    1) percent - The storage fee
    2) fraction - the fraction balance for assetid
    3) fractime - the time of the fraction"
  (let* ((db (db client))
         (asset (or (getasset client assetid) (return-from client-storage-info nil)))
         (issuer (asset-issuer asset))
         (percent (asset-percent asset)))
    (cond ((equal issuer (id client)) nil)
          ((or (not percent) (bc-zerop percent)) nil)
          (t (let* ((key (userfractionkey client assetid))
                    (msg (db-get db key)))
               (if msg
                   (let ((args (getarg $MSG (unpack-servermsg
                                             client msg $ATFRACTION))))
                     (values percent (getarg $AMOUNT args) (getarg $TIME args)))
                   (values percent "0" "0")))))))

(defun pubkeykey (id)
  (append-db-keys $PUBKEY id))

(defmethod serverkey ((client client) &optional prop (serverid (serverid client)))
  (let ((key (append-db-keys $SERVER serverid)))
    (if prop
        (append-db-keys key prop)
        key)))

(defmethod serverprop ((client client) prop &optional (serverid (serverid client)))
  (db-get (db client) (serverkey client prop serverid)))

(defmethod assetkey ((client client) &optional assetid)
  (let ((key (serverkey client $ASSET)))
    (if assetid
        (append-db-keys key assetid )
        key)))

(defmethod assetprop ((client client) assetid)
  (db-get (db client) (assetkey client assetid)))

(defmethod tranfeekey ((client client))
  (serverkey client $TRANFEE))

(defmethod tranfee ((client client))
  (db-get (db client) (tranfeekey client)))

(defmethod regfee-key ((client client))
  (serverkey client $REGFEE))

(defmethod regfee ((client client))
  (db-get (db client) (regfee-key client)))

(defmethod other-fees-key ((client client))
  (serverkey client $FEE))

(defmethod other-fees ((client client) &optional operation)
  (let* ((db (db client))
         (key (other-fees-key client))
         (operations (if operation
                        (list operation)
                        (db-contents db key)))
         (res nil))
    (dolist (operation operations)
      (let ((fees (db-get db key operation)))
        (if res
            (dotcat res "." fees)
            (setf res fees))))
    res))

(defmethod userserverkey ((client client) &optional prop (serverid (serverid client)))
  (let ((key (append-db-keys $ACCOUNT (id client) $SERVER serverid)))
    (if prop
        (append-db-keys key prop)
        key)))

(defmethod userserverprop ((client client) &optional prop (serverid (serverid client)))
  (db-get (db client) (userserverkey client prop serverid)))

(defmethod (setf userserverprop) (value (client client) prop
                                &optional (serverid (serverid client)))
  (setf (db-get (db client) (userserverkey client prop serverid)) value))

(defmethod userreqkey ((client client) &optional (serverid (serverid client)))
  (userserverkey client $REQ serverid))

(defmethod userreq ((client client) &optional (serverid (serverid client)))
  (db-get (db client) (userreqkey client serverid)))

(defmethod usertimekey ((client client))
  (userserverkey client $TIME))

(defmethod userfractionkey ((client client) &optional assetid)
  (let ((key (userserverkey client $FRACTION)))
    (if assetid
        (append-db-keys key assetid)
        key)))

(defmethod userstoragefeekey ((client client) &optional assetid)
  (let ((key (userserverkey client $STORAGEFEE)))
    (if assetid
        (append-db-keys key assetid)
        key)))

(defmethod user-last-transaction-key ((client client))
  (userserverkey client $LASTTRANSACTION))

(defmethod userbalancekey ((client client)  &optional acct assetid)
  (let ((key (userserverkey client $BALANCE)))
    (cond (acct
           (setq key (append-db-keys key acct))
           (if assetid
               (append-db-keys key assetid)
               key))
          (t key))))

(defmethod userbalance ((client client) acct assetid)
  (userbalanceandtime client acct assetid))

(defmethod userbalanceandtime ((client client) acct assetid)
  "Returns three values: the balance, time, and raw message"
  (when (null acct) (setq acct $MAIN))
  (let* ((msg (db-get (db client) (userbalancekey client acct assetid))))
    (when msg
      (let ((args (unpack-servermsg client msg $ATBALANCE)))
        (setq args (getarg $MSG args))
        (values (getarg $AMOUNT args) (getarg $TIME args) msg)))))

(defmethod useroutboxkey ((client client) &optional time)
  (let ((key (userserverkey client $OUTBOX)))
    (if time
        (append-db-keys key time)
        key)))

(defmethod useroutbox ((client client) time)
  (db-get (db client) (useroutboxkey client time)))

(defmethod useroutboxhashkey ((client client))
  (userserverkey client $OUTBOXHASH))

(defmethod useroutboxhash ((client client))
  (db-get (db client) (useroutboxhashkey client)))

(defmethod userbalancehashkey ((client client))
  (userserverkey client $BALANCEHASH))

(defmethod userbalancehash ((client client))
  (db-get (db client) (userbalancehashkey client)))

(defmethod userinboxkey ((client client))
  (userserverkey client $INBOX))

(defmethod userinboxignoredkey ((client client))
  (userserverkey client $INBOXIGNORED))

(defmethod user-permission-key ((client client) &optional permission)
  (let ((key (userserverkey client $PERMISSION (serverid client))))
    (if permission
      (append-db-keys key permission)
      key)))

(defmethod server-permission-key ((client client) &optional permission)
  (let ((key (serverkey client $PERMISSION (serverid client))))
    (if permission
        (append-db-keys key permission)
        key)))

(defmethod contactkey ((client client) &optional otherid prop)
  (let ((key (append-db-keys $ACCOUNT (id client) $CONTACT)))
    (cond (otherid
           (setq key (append-db-keys key otherid))
           (if prop
               (append-db-keys key prop)
               key))
          (t key))))

(defmethod contactprop ((client client) otherid prop)
    (db-get (db client) (contactkey client otherid prop)))

(defmethod (setf contactprop) (value (client client) otherid prop)
  (setf (db-get (db client) (contactkey client otherid prop)) value))

(defmethod userhistorykey ((client client))
  (userserverkey client $HISTORY))

(defmethod userversionkey ((client client))
  (userserverkey client $VERSION))

(defmethod format-asset-value ((client client) value assetid &optional (incnegs t))
  "Format an asset value from the asset ID or $this->getasset($assetid)"
  (let ((asset (if (stringp assetid)
                   (getasset client assetid)
                   assetid)))
    (format-value
     value (asset-scale asset) (asset-precision asset) incnegs)))

(defmethod unformat-asset-value ((client client) formattedvalue assetid)
  "Unformat an asset value from the asset ID or $this->getasset($assetid)"
  (let ((asset (if (stringp assetid)
                   (getasset client assetid)
                   assetid)))
    (unformat-value formattedvalue (asset-scale asset))))

(defun fill-string (len &optional (char #\0))
  (make-string len :initial-element char))

(defun format-value (value scale precision &optional (incnegs t))
  ;; format an asset value for user printing
  (let ((sign 1)
        res)
    (when (and incnegs (< (bccomp value 0) 0))
      (setq value (bcadd value 1)
            sign -1))
    (cond ((and (eql 0 (bccomp scale 0)) (eql 0 (bccomp precision 0)))
           (setq res value))
          ((> (bccomp scale 0) 0)
           (let ((pow (bcpow 10 scale)))
             (wbp (scale)
               (setq res (bcdiv value pow))))
           (let ((dotpos (position #\. res))
                 (precision (parse-integer precision)))
             (cond ((null dotpos)
                    (unless (eql 0 (bccomp precision 0))
                      (dotcat res "." (fill-string precision))))
                   (t
                    ;; Remove trailing zeroes
                    (let ((endpos (1- (length res))))
                      (loop
                         while (> endpos dotpos)
                         do
                           (unless (eql #\0 (aref res endpos)) (return))
                           (decf endpos))
                      (let* ((zeroes (- precision (- endpos dotpos)))
                             (zerostr (if (> zeroes 0) (fill-string zeroes) "")))
                        (setq res (strcat (subseq res 0 (1+ endpos)) zerostr)))))))))

    (when (and (eql 0 (bccomp value 0)) (< sign 0))
      (setq res (strcat "-" res)))

    (when (integerp res) (setf res (princ-to-string res)))

    ;; Insert commas
    (let* ((start 0)
           (dotpos (or (position #\. res) (length res)))
           (len dotpos))
      (when (eql #\- (aref res 0))
        (incf start)
        (decf len))
      (loop
         for pos = (+ len start -3)
         while (> pos start)
         do
           (setq res (strcat (subseq res 0 pos) "," (subseq res pos)))
           (decf len 3)))

    res))

(defun unformat-value (formattedvalue scale)
  (let ((value (if (eql 0 (bccomp scale 0))
                   formattedvalue
                   (split-decimal
                    (wbp (scale) (bcmul formattedvalue (bcpow 10 scale)))))))
    (if (or (< (bccomp value 0) 0)
            (and (eql 0 (bccomp value 0))
                 (eql #\- (aref formattedvalue 0))))
      (bcsub value 1)
      value)))

(defmethod get-pubkey-from-server ((client client) id)
  "Send an $ID command to the server, if there is one.
 Parse out the pubkey, cache it in the database, and return it.
   Return nil if there is no server or it doesn't know the id."
  (let* ((db (db client))
         (serverid (or (current-server client)
                     (return-from get-pubkey-from-server nil)))
         (msg (sendmsg client $ID serverid id))
         (args (getarg $MSG (unpack-servermsg client msg $ATREGISTER)))
         (pubkey (getarg $PUBKEY args))
         (pubkeykey (pubkeykey id)))
    (when pubkey
      (db-put db pubkeykey pubkey)
      pubkey)))

(defmethod getreq ((client client) &optional reinit-p)
  "Get a new request"
  (let ((db (db client))
        (key (userreqkey client)))
    (when reinit-p
      (let* ((msg (sendmsg client $GETREQ (serverid client)))
             (args (unpack-servermsg client msg $REQ))
             (req (getarg $REQ args)))
        (setf (db-get db key) req)))
    (with-db-lock (db key)
      (setf (db-get db key) (bcadd (db-get db key) 1)))))

(defmethod gettime ((client client) &optional forcenew)
  "Get a timestamp from the server"
  (let ((db (db client))
        (serverid (serverid client))
        (key (usertimekey client)))
    (with-db-lock (db key)
      (cond (forcenew (setf (db-get db key) nil))
            (t
             (let ((times (db-get db key)))
               (when times
                 (setf times (explode #\, times)
                       (db-get db key) (cadr times))
                 (return-from gettime (car times)))))))
    (flet ((get-time-args ()
             (let* ((req (getreq client))
                    (msg (sendmsg client $GETTIME serverid req)))
               (unpack-servermsg client msg $TIME))))
      (let ((args (handler-case (get-time-args)
                    (error ()
                      (forceinit client)
                      (get-time-args)))))
        (getarg $TIME args)))))

(defmethod syncreq ((client client))
  "Check once per instance that the local idea of the reqnum matches
   that at the server.
   If it doesn't, clear the account information, so that init-server-accts()
   will reinitialize.
   Eventually, we want to compare to see if we can catch a server error."
  (let* ((db (db client))
         (key (userserverkey client $REQ))
         (reqnum (db-get db key)))
    (when (equal reqnum "-1") (setf (syncedreq-p client) t))
    (unless (syncedreq-p client)
      (let* ((serverid (serverid client))
             (msg (sendmsg client $GETREQ serverid))
             (args (unpack-servermsg client msg $REQ))
             (newreqnum (getarg $REQ args)))
      (unless (equal reqnum newreqnum)
        (setq reqnum "-1")
        (let* ((balkey (userbalancekey client))
               (accts (db-contents db balkey)))
          (dolist (acct accts)
            (let* ((acctkey (append-db-keys balkey acct))
                   (assetids (db-contents db acctkey)))
              (dolist (assetid assetids)
                (setf (db-get db acctkey assetid) nil)))))
        (let* ((frackey (userfractionkey client))
               (assetids (db-contents db frackey)))
          (dolist (assetid assetids)
            (setf (db-get db frackey assetid) nil)))
        (let* ((outboxkey (useroutboxkey client))
               (outtimes (db-contents db outboxkey)))
          (dolist (outtime outtimes)
            (setf (db-get db outboxkey outtime) nil)))
        (setf (db-get db (userbalancehashkey client)) nil
              (db-get db (useroutboxhashkey client)) nil)
        (setf (syncedreq-p client) t))))
    reqnum))

(defmethod reinit-balances ((client client))
  "Synchronize with the server"
  (require-current-server client "Can't reinitialize balances")
  (forceinit client))

;; Internal implementation of reinit-balances
(defmethod forceinit ((client client))
  "Force a reinit of the client database for the current user"
  (let ((db (db client)))
    (setf (db-get db (userreqkey client)) "0"
          (syncedreq-p client) nil)
    (init-server-accts client)))

(defmethod init-server-accts ((client client))
  "If we haven't yet downloaded accounts from the server, do so now.
   This is how a new client instance gets initialized from an existing
   server instance."
  (let* ((db (db client))
         (id (id client))
         (serverid (serverid client))
         (parser (parser client))
         (reqnum (syncreq client)))

    (when (equal reqnum "-1")
      ;; Get $REQ
      (let* ((msg (sendmsg client $GETREQ serverid))
             (args (unpack-servermsg client msg $REQ))
             (reqnum (bcadd (getarg $REQ args) 1)))

        ;; Get account balances
        (setq msg (sendmsg client $GETBALANCE serverid reqnum))
        (let ((reqs (and msg (parse parser msg t)))
              (balances (make-equal-hash))
              (fractions (make-equal-hash))
              (balancehash nil))
          (dolist (req reqs)
            (setq args (match-serverreq client req))
            (let* ((request (getarg $REQUEST args))
                   (msgargs (getarg $MSG args))
                   (customer (and msgargs (getarg $CUSTOMER msgargs))))
              (when (and msgargs (not (equal customer id)))
                (error "Server wrapped somebody else's (~a) message: ~s" customer msg))
              (cond ((equal request $ATBALANCE)
                     (unless (equal (getarg $REQUEST msgargs) $BALANCE)
                       (error "Server wrapped a non-balance request with @balance"))
                     (let ((assetid
                            (or (getarg $ASSET msgargs)
                                (error "Server wrapped balance missing asset ID")))
                           (acct (or (getarg $ACCT msgargs) $MAIN)))
                       (setf (gethash assetid (get-inited-hash acct balances))
                             (get-parsemsg req))))
                    ((equal request $ATBALANCEHASH)
                     (unless (equal (getarg $REQUEST msgargs) $BALANCEHASH)
                       (error "Server wrapped a non-balancehash request with @balancehash"))
                     (setq balancehash (get-parsemsg req)))
                    ((equal request $ATFRACTION)
                     (unless (equal (getarg $REQUEST msgargs) $FRACTION)
                       (error "Server wrapped a non-fraction request with @fraction"))
                     (let ((assetid
                            (or (getarg $ASSET msgargs)
                                (error "Server wrapped fraction missing asset ID")))
                           (fraction (get-parsemsg req)))
                       (setf (gethash assetid fractions) fraction))))))
          ;; Get outbox
          (setq reqnum (bcadd reqnum 1)
                msg (sendmsg client $GETOUTBOX serverid reqnum))
          (let ((reqs (parse parser msg t))
                (outbox (make-equal-hash))
                (outboxhash nil)
                (outboxtime nil))
            (dolist (req reqs)
              (setq args (match-serverreq client req))
              (let* ((request (getarg $REQUEST args))
                     (msgargs (getarg $MSG args))
                     (customer (and msgargs (getarg $CUSTOMER msgargs))))
                (when (and msgargs (not (equal customer id)))
                  (error "Server wrapped somebody else's (~a) message: ~s"
                         customer msg))
                (cond ((equal request $ATGETOUTBOX))
                      ((equal request $ATSPEND)
                       (unless (equal (getarg $REQUEST msgargs) $SPEND)
                         (error "Server wrapped a non-spend request with @spend"))
                       (let ((time (getarg $TIME msgargs)))
                         (setf outboxtime time
                               (gethash time outbox) (get-parsemsg req))))
                      ((equal request $ATTRANFEE)
                       (unless (equal (getarg $REQUEST msgargs) $TRANFEE)
                         (error "Server wrapped a non-tranfee request with @tranfee"))
                       (let* ((time (getarg $TIME msgargs))
                              (msg (or (gethash time outbox)
                                       (error "No spend message for time: ~s" time))))
                         (setf (gethash time outbox)
                               (strcat msg "." (get-parsemsg req)))))
                      ((equal request $ATOUTBOXHASH)
                       (unless (equal (getarg $REQUEST msgargs) $OUTBOXHASH)
                         (error "Server wrapped a non-outbox request with @outboxhash"))
                       (setq outboxhash (get-parsemsg req)))
                      ((equal request $COUPONENVELOPE)
                       (unless outboxtime
                         (error "Got a coupon envelope with no outboxtime"))
                       (let ((msg (or (gethash outboxtime outbox)
                                      (error "No spend message for coupon envelope"))))
                         (setq msg (strcat msg "." (get-parsemsg req)))
                         (setf (gethash outboxtime outbox) msg
                               outboxtime nil)))
                      (t
                       (error "While processing getoutbox: bad request: ~s"
                              request)))))

            (when (and (not (equal id serverid))
                       (not outboxhash)
                       outbox
                       (> (hash-table-count outbox) 0))
              (error "While procesing getoutbox: outbox items but no outboxhash"))

            ;; All is well. Write the data
            (loop
               for acct being the hash-key using (hash-value assets) of balances
               do
               (loop
                  for assetid being the hash-key using (hash-value msg) of assets
                  do
                  (setf (db-get db (userbalancekey client acct assetid)) msg)))

            (loop
               for assetid being the hash-key using (hash-value fraction)
               of fractions
               do
               (setf (db-get db (userfractionkey client assetid)) fraction))

            (loop
               for time being the hash-key using (hash-value msg) of outbox
               do
               (setf (db-get db (useroutboxkey client time)) msg))

            (setf (db-get db (userbalancehashkey client)) balancehash
                  (db-get db (useroutboxhashkey client)) outboxhash
                  (db-get db (userreqkey client)) reqnum)))
        ;; update fees
        (ignore-errors                  ;server may not implement fees
          (getfees client t))
        ;; update permissions
        (ignore-errors                  ;server may not implement permissions
          (get-permissions client nil t))
        (when (member $TWOPHASECOMMIT (getfeatures client t) :test #'equal)
          (get-last-transaction client t))
        nil))))

(defmethod unpacker ((client client))
  #'(lambda (msg) (unpack-servermsg client msg)))

(defmethod balancehashmsg ((client client) time acctbals &optional
                           two-phase-commit-p)
  (let* ((db (db client))
         (serverid (serverid client)))
    (multiple-value-bind (hash hashcnt)
        (balancehash db (unpacker client) (userbalancekey client) acctbals)
      (if two-phase-commit-p
          (custmsg client $BALANCEHASH serverid time hashcnt hash $TWOPHASECOMMIT)
          (custmsg client $BALANCEHASH serverid time hashcnt hash)))))

(defmethod outboxhashmsg ((client client) transtime &key
                          newitem removed-times two-phase-commit-p)
  (let ((db (db client))
        (serverid (serverid client))
        (key (useroutboxkey client)))
    (multiple-value-bind (hash hashcnt)
        (dirhash db key (unpacker client) newitem removed-times)
      (if two-phase-commit-p
          (custmsg client $OUTBOXHASH serverid transtime
                   (or hashcnt 0) (or hash "") $TWOPHASECOMMIT)
          (custmsg client $OUTBOXHASH serverid transtime
                   (or hashcnt 0) (or hash ""))))))

;; Web client session support

(defun newsessionid ()
  "Return a new, random, session ID"
  (let ((res (bin2hex (urandom-bytes 20))))
    (if (< (length res) 40)
        (strcat (fill-string (- 40 (length res))) res)
        res)))

(defun xorcrypt (key string)
  "xor hashed copies of KEY with STRING and return the result.
   This is a really simple encryption that only really works if
   KEY is known to be random, e.g. the output of (newsessionid)."
  (let* ((key (hex2bin (sha1 key) :string))
         (idx 0)
         (keylen (length key))
         (len (length string)))
    (with-output-to-string (s)
      (dotimes (i len)
        (write-char (code-char
                     (logxor (char-code (aref key idx))
                             (char-code (aref string i))))
                    s)
        (incf idx)
        (when (>= idx keylen)
          (setq idx 0
                key (hex2bin (sha1 key) :string)
                keylen (length key)))))))
*/

	/**
	 * @return The path to the user session directory in the AccountDB
	 */
	public String userSessionKey() {
		return id + "/" + T.SESSION;
	}
	
	public String sessionPassphrase(String sessionid) {
		return null;    // TO DO
	}
	
	public String makeSession(String passphrase) {
		return null;   // TO DO
	}
	
/*
(defmethod usersessionhash ((client client))
  "Return the user's session hash."
  (db-get (db client) (usersessionkey client)))

(defmethod session-passphrase ((client client) sessionid)
  "Return the passphrase corresponding to a session id"
  (session-passphrase (db client) sessionid))

(defmethod session-passphrase ((db fsdb) sessionid)
  (let ((passcrypt (or (db-get db (sessionkey (sha1 sessionid)))
                       (error "No passphrase for session"))))
    (xorcrypt sessionid passcrypt)))

(defmethod make-session ((client client) passphrase)
  "Create a new user session, encoding $passphrase with a new session id.
   Return the new session id.
   If the user already has a session stored with another session id,
   remove that one first."
  (let* ((db (db client))
         (sessionid (newsessionid))
         (passcrypt (xorcrypt sessionid passphrase))
         (usersessionkey (usersessioney client)))
    (with-db-lock (db usersessionkey)
      (let ((oldhash (db-get db usersessionkey)))
        (when oldhash
          (setf (db-get db (sessionkey oldhash)) nil)))
      (let ((newhash (sha1 sessionid)))
        (setf (db-get db (sessionkey newhash)) passcrypt
              (db-get db usersessionkey) newhash)))
    sessionid))
*/

	/**
	 * Remove the current user's session 
	 */
	public void removeSession() {
		ClientDB.SessionDB sessiondb = db.getSessionDB();
		ClientDB.AccountDB accountdb = db.getAccountDB();
		String usersessionkey = this.userSessionKey();
		String oldhash = accountdb.get(usersessionkey);
		if (oldhash != null) {
			accountdb.put(usersessionkey, null);
			sessiondb.put(oldhash, null);
		}
	}

/*
(defmethod user-preference-key (client pref)
  "Preferences"
  (append-db-keys $ACCOUNT (id client) $PREFERENCE pref))

(defmethod user-preference ((client client) pref)
  "Get or set a user preference.
   Include the $value to set."
  (require-current-user client)
  (let* ((db (db client))
         (key (user-preference-key client pref)))
    (db-get db key)))

(defmethod (setf user-preference) (value (client client) pref)
  (require-current-user client)
  (let* ((db (db client))
         (key (user-preference-key client pref)))
    (setf (db-get db key) value)))
*/
	private static final Hashtable<String,String> nonEncryptionServerHash = new Hashtable<String, String>();
	
	public static boolean isNoServerEncryption(String serverid) {
		return !nonEncryptionServerHash.get(serverid).equals(null);
	}
	
	public static void setIsNoServerEncryption(String serverid, boolean value) {
		if (value) nonEncryptionServerHash.put(serverid,  serverid);
		else nonEncryptionServerHash.remove(serverid);
	}
	
/*
(defvar *inside-opensession-p* nil)

(defmethod opensession ((client client) &key
                        timeout inactivetime auto-session-p)
  (unless *inside-opensession-p*
    (require-current-server client "In opensession(): server not set")
    (let ((*inside-opensession-p* t))
      (handler-case
          (opensession-internal
           client timeout inactivetime auto-session-p)
        (error ()
          (opensession-internal
           client timeout inactivetime auto-session-p t))))))

(defun opensession-internal (client timeout inactivetime auto-session-p
                             &optional reinit-p)
  (unless (and auto-session-p (no-server-encryption-p (serverid client)))
    (let* ((req (getreq client reinit-p))
           (msg (cond (inactivetime
                       (custmsg client $OPENSESSION (serverid client) req
                                (or timeout "") inactivetime))
                      (timeout
                       (custmsg client $OPENSESSION (serverid client) req
                                timeout))
                      (t (custmsg client $OPENSESSION (serverid client) req))))
           (*msg* msg)
           (servermsg (process (server client) msg))
           (args (unpack-servermsg client servermsg $ATOPENSESSION))
           (ciphertext (getarg $CIPHERTEXT args))
           (plaintext (privkey-decrypt ciphertext (privkey client)))
           (id&key (parse-square-bracket-string plaintext)))
      (unless (equal *msg* (get-parsemsg (getarg $MSG args)))
        (error "Server return doesn't wrap request message"))
      (new-client-crypto-session (first id&key) (id client) (second id&key)))))

(defmethod closesession ((client client))
  (require-current-server client "In close-session: server not set")
  (let ((*inside-opensession-p* t))
    (handler-case
        (closesession-internal client)
      (error ()
        (closesession-internal client t)))))

(defun closesession-internal (client &optional reinit-p)
  (let* ((id (id client))
         (session (get-client-userid-crypto-session id)))
    (when session
      (let* ((serverid (serverid client))
             (req (getreq client reinit-p))
             (sessionid (and session (crypto-session-id session)))
             (msg (sendmsg client $CLOSESESSION serverid req sessionid)))
        (unpack-servermsg client msg $ATCLOSESESSION)
        (remove-client-crypto-session id)))))
*/
	// For reporting client errors
	public static class ClientException extends Exception {
		private static final long serialVersionUID = -7740576192574990988L;
		public ClientException(String msg) {
			super(msg);
		}
		public ClientException(String msg, Exception e) {
			super((msg==null ? "" : msg + " - ") + e.getClass().getName() + ": " + e.getMessage());
		}
		public ClientException(Exception e) {
			super(null, e);
		}
	}
	
	/**
	 * Create a new ServerProxy
	 * @param url The URL of the server
	 * @return 
	 */
	public ServerProxy makeServerProxy(String url) {
		return new ServerProxy(url);
	}
	
	/**
	 * This class controls the connection to the Truledger server
	 * It also encapsulates the wire encryption.
	 * @author billstclair
	 */
	public class ServerProxy {
		String url;
		AndroidHttpClient httpClient;
		
		public ServerProxy(String url) {
			this.url = url;
		}

		public void close() {
			AndroidHttpClient c = httpClient;
			if (c != null) {
			   httpClient = null;
			   c.close();
			}
		}
		
		public String post(String msg, boolean debug) throws ClientException {
			AndroidHttpClient c = httpClient;
			if (c == null) {
				c = httpClient = AndroidHttpClient.newInstance("Truledger-Android", ctx);
			}

			// Add parameters to the post request
			HttpPost post = new HttpPost(url);
			List<NameValuePair> nvp = new ArrayList<NameValuePair>(2);
			nvp.add(new BasicNameValuePair("msg", msg));
			if (debug) {
				nvp.add(new BasicNameValuePair("debugmsgs", "true"));
			}
			try {
				post.setEntity(new UrlEncodedFormEntity(nvp));

				// Send the post to the server
				HttpResponse response = httpClient.execute(post);

				// Turn the response into a string
				InputStream stream = response.getEntity().getContent();
				StringBuilder res = new StringBuilder();
				BufferedReader rd = new BufferedReader(new InputStreamReader(stream), 4096);
				String line;
				while ((line = rd.readLine()) != null) {
					res.append(line);
					res.append("\n");
				}
				return res.toString();
			} catch (Exception e) {
				throw new ClientException(e);
			}
		}
		
		public String post(String msg) throws ClientException {
			return this.post(msg, false);
		}

/*
(defun ensure-client-crypto-session (client)
  (and (id client)
       (serverid client)
       (not (no-server-encryption-p (serverid client)))
       (or (get-client-userid-crypto-session (id client))
           (values (ignore-errors (opensession client :auto-session-p t))
                   t))))

;; This prevents thrashing after a new crypto-session is created.
(defun update-msg-req-numbers (client msg)
  (let* ((parser (parser client))
         (reqs (parse parser msg nil))
         (newmsg nil))
    (when (and reqs (null (cdr reqs)))
      (let* ((req (car reqs))
             (m (get-parsemsg req))
             (args (match-pattern parser req))
             (req (getarg $REQ args)))
        (when req
          (setf req (getreq client))
          (let* ((pattern (gethash (getarg $REQUEST args) (patterns)))
                 (names `(,$REQUEST ,@pattern))
                 (newargs (mapcar (lambda (name)
                                    (cond ((equal name $REQ) req)
                                          (t (getarg (if (listp name)
                                                         (car name)
                                                         name)
                                                     args))))
                                  names)))
            (setf newargs (nreverse newargs))
            (loop
               (when (or (null newargs) (car newargs))
                 (return))
               (pop newargs))
            (setf newargs (mapcar (lambda (x) (or x ""))
                                  (nreverse newargs))
                  m (apply #'custmsg client newargs))))
        (setf newmsg m)
        (when (equal msg *msg*)
          (setf *msg* newmsg))))
    newmsg))
*/

	/**
	 * This will eventually add the wire encryption to post().
	 * For now, it just calls post()
	 * @param msg
	 * @return
	 */
	public String process(String msg) throws ClientException {
		return this.post(msg);
	}
	
/*
(defmethod process ((proxy serverproxy) msg)
  (let* ((url (url proxy))
         (client (client proxy))
         (test-server (test-server client)))

    ;; This is a kluge to get around versions of Apache that insist
    ;; on sending "301 Moved Permanently" for directory URLs that
    ;; are missing a trailing slash.
    ;; Drakma can likely handle this, but I'm just copying the PHP
    ;; code for now.
    (unless (eql #\/ (aref url (1- (length url))))
      (dotcat url "/"))

    (let* ((vars `(("msg" . ,msg)))
           (id (id client)))

      (when (debug-stream-p)
        (push '("debugmsgs" . "true") vars))

      (let ((text nil)
            res)
        (if test-server
            (setf res (truledger-server:process test-server msg))
            (multiple-value-bind (session new-session-p)
                (ensure-client-crypto-session client)
              (when (and session new-session-p)
                (setf msg (update-msg-req-numbers client msg)))
              (flet
                  ((doit ()
                     (when (debug-stream-p)
                       (debugmsg "<b>===SENT</b>: ~a~%" (trimmsg msg)))
                     (when session
                       (when (debug-stream-p)
                         (debugmsg "<b>Using crypto session: ~s~%"
                                   (crypto-session-id session)))
                       (setf (cdr (assoc "msg" vars :test #'equal))
                             (encrypt-for-crypto-session session msg)))
                     (multiple-value-bind (res status headers)
                         (post proxy url vars)
                       (when (eql status 301)
                         (let ((location
                                (cdr (assoc :location headers
                                            :test #'eq))))
                           (when location
                             (setf (url proxy) location
                                   res (post proxy location vars)))))
                       res)))
                (declare (dynamic-extent #'doit))
                (setf res (doit))
                (when session
                  (cond ((not (square-bracket-string-p res))
                         ;; Server doesn't do wire encryption
                         (remove-client-crypto-session id)
                         (setf (no-server-encryption-p (serverid client)) t
                               session nil))
                        (t
                         (block nil
                           (when (setf res (ignore-errors
                                             (decrypt-for-crypto-session res)))
                             (return))
                           (remove-client-crypto-session id)
                           (setf session
                                 (ensure-client-crypto-session client)
                                 msg (update-msg-req-numbers client msg)
                                 res (doit))
                           (unless session (return))
                           (when (setf res (ignore-errors
                                             (decrypt-for-crypto-session res)))
                             (return))
                           (remove-client-crypto-session id)
                           (error
                            "Unable to privately communicate with server"))))))))
        (when (and (> (length res) 2)
                   (equal "<<" (subseq res 0 2)))
          (let ((pos (search #.(format nil ">>~%") res)))
            (when pos
              (setq text (subseq res 2 pos)
                    res (subseq res (+ pos 3))))))
        (when text
          (debugmsg "<b>===SERVER SAID</b>: ~a" (hsc text))
          (let ((len (length text)))
            (unless (and (> len 0) (eql #\newline (aref text (1- len))))
              (debugmsg "~%"))))
    
        (when (debug-stream-p)
          (debugmsg "<b>===RETURNED</b>: ~a~%" (and msg (trimmsg res))))

        res))))
*/
	
	}
	
/*
(defun trimmsg (msg)
  (let* ((msg (remove-signatures msg))
         (tokens (mapcar #'cdr (tokenize msg)))
         (res ""))
    (dolist (token tokens)
      (cond ((characterp token) (dotcat res (hsc (string token))))
            ((ishex-p token) (dotcat res (hsc token)))
            (t (dotcat res "<b>" (hsc token) "</b>"))))
    res))

(defun ishex-p (str)
  (let ((len (length str)))
    (dotimes (i len t)
      (unless (position (aref str i) "0123456789abcdef")
        (return nil)))))

;; Look up a public key, from the client database first, then from the
;; current server.
(defclass pubkeydb (db)
  ((client :type client
           :initarg :client
           :accessor client)
   (db :type db
       :initarg :db
       :accessor db)))

(defvar *insidep* nil)

(defmethod db-get ((pubkeydb pubkeydb) id &rest more-keys)
  (assert (null more-keys) nil "PUBKEYDB takes only a single DB-GET key")
  (or (db-get (db pubkeydb) id)
      (and (not *insidep*)
           (let ((*insidep* t))
             (get-pubkey-from-server (client pubkeydb) id)))))

;;;
;;; Loom client db access
;;;

;; Don't go over the wire for hashing
(setf (loom:sha256-function) #'sha256)

(defun make-client-db ()
  (fsdb:make-fsdb (client-db-dir)))

(defun folded-hash (string)
  (loom:fold-hash (sha256 string)))

(defun random-hash ()
  (string-downcase (format nil "~64,'0x" (cl-crypto:get-random-bits 256))))

(defun loom-get-salt (db)
  (or (db-get db $LOOM $SALT)
      (setf (db-get db $LOOM $SALT)
            (random-hash))))

(defun format-sha256 (integer)
  (format nil "~(~64,'0x~)" integer))

(defun salted-hash (db string &optional fold-p)
  (let* ((salt (parse-integer (loom-get-salt db) :radix 16))
         (hash (sha256
                (format-sha256
                 (logxor salt (parse-integer string :radix 16))))))
    (if fold-p
        (loom:fold-hash hash)
        hash)))

(defun loom-urlhash (url)
  (loom:fold-hash (sha256 url)))

(defun loom-account-hash (db passphrase)
  (salted-hash db (sha256 passphrase) t))

(defun loom-get-server-url (db urlhash)
  (db-get db $LOOM $SERVER urlhash))

(defun (setf loom-get-server-url) (url db urlhash)
  (setf (db-get db $LOOM $SERVER urlhash) url))

(defun loom-add-server-url (db url)
  (setf (loom-get-server-url db (loom-urlhash url)) url))

(defun loom-account-key (account-hash)
  (fsdb:append-db-keys $LOOM $ACCOUNT account-hash))

(defun loom-account-server-key (account-hash &optional urlhash)
  (let ((res (fsdb:append-db-keys (loom-account-key account-hash) $SERVER)))
    (if urlhash
        (fsdb:append-db-keys res urlhash)
        res)))

(defun loom-account-preference (db account-hash &rest pref-path)
  (apply #'fsdb:db-get db (loom-account-key account-hash) $PREFERENCE pref-path))

(defun (setf loom-account-preference) (value db account-hash &rest pref-path)
  (let ((key (apply #'fsdb:append-db-keys $PREFERENCE pref-path)))
    (setf (fsdb:db-get db (loom-account-key account-hash) key)
          value)))

(defun loom-urlhash-preference (db account-hash)
  (loom-account-preference db account-hash $URLHASH))

(defun (setf loom-urlhash-preference) (value db account-hash)
  (check-type value string)
  (setf (loom-account-preference db account-hash $URLHASH) value))

(defun loom-namehash-preference (db account-hash urlhash)
  (loom-account-preference db account-hash $NAMEHASH urlhash))

(defun (setf loom-namehash-preference) (value db account-hash urlhash)
  (check-type value (or null string))
  (setf (loom-account-preference db account-hash $NAMEHASH urlhash) value))

(defstruct loom-server
  url
  urlhash
  wallets)

(defstruct loom-wallet
  name
  urlhash
  namehash
  encrypted-passphrase
  encrypted-wallet-string
  private-p)

;; We modify the passphrase a little so that it hashes
;; differently for encryption.
;; The loom address of an unencrypted wallet is the sha1 hash of
;; the passphrase. Don't want to give away the sha1 of the encryption
;; passphrase.
(defun loom-passphrase (passphrase)
  (concatenate 'string passphrase (reverse passphrase)))

(defun encrypt (plain-text passphrase)
  (multiple-value-bind (res iv)
      (cl-crypto:aes-encrypt-string plain-text (loom-passphrase passphrase))
    (concatenate 'string
                 (cl-base64:usb8-array-to-base64-string iv)
                 "|"
                 res)))

(defun decrypt (cipher-text passphrase)
  (let ((iv-and-res (split-sequence:split-sequence #\| cipher-text)))
    (cl-crypto:aes-decrypt-to-string
     (second iv-and-res) (loom-passphrase passphrase) :iv (first iv-and-res))))

(defun loom-wallet-passphrase (wallet account-passphrase)
  (check-type wallet loom-wallet)
  (decrypt (loom-wallet-encrypted-passphrase wallet) account-passphrase))

(defun loom-wallet-location (wallet account-passphrase)
  (check-type wallet loom-wallet)
  (let ((passphrase (loom-wallet-passphrase wallet account-passphrase)))
    (loom:passphrase-location passphrase t (loom-wallet-private-p wallet))))

(defun loom-stored-wallet-string (wallet account-passphrase)
  (check-type wallet loom-wallet)
  (let ((str (loom-wallet-encrypted-wallet-string wallet)))
    (and str (decrypt str account-passphrase))))

(defun loom-stored-wallet (wallet account-passphrase)
  (let ((str (loom-stored-wallet-string wallet account-passphrase)))
    (and str (loom:parse-wallet-string str))))

;; Adds to the local database only. Doesn't touch the remote server.
(defun add-loom-wallet (db account-passphrase url name passphrase &optional private-p)
  (let* ((urlhash (loom-urlhash url))
         (account-hash (loom-account-hash db account-passphrase))
         (server-key (loom-account-server-key account-hash urlhash))
         (namehash (folded-hash name))
         (wallet-key (fsdb:append-db-keys server-key $WALLET namehash)))
    (unless (loom-get-server-url db urlhash)
      (setf (loom-get-server-url db urlhash) url))
    (when (fsdb:db-get db server-key $WALLETNAME namehash)
      (error "A wallet named ~s already exists for ~s"
             name url))
    (setf (fsdb:db-get db server-key $WALLETNAME namehash) name
          (fsdb:db-get db wallet-key $PASSPHRASE)
          (encrypt passphrase account-passphrase)
          (fsdb:db-get db wallet-key $PRIVATE) (and private-p "yes"))
    namehash))

(defun store-loom-wallet (db account-passphrase wallet loom-wallet &optional
                          (account-hash
                           (loom-account-hash db account-passphrase)))
  (check-type wallet loom-wallet)
  (check-type loom-wallet loom:wallet)
  (let* ((server-key (loom-account-server-key
                     account-hash (loom-wallet-urlhash wallet)))
         (wallet-key (fsdb:append-db-keys
                      server-key $WALLET (loom-wallet-namehash wallet)))
         (wallet-string (loom:wallet-string loom-wallet))
         (encrypted-wallet-string (encrypt wallet-string account-passphrase)))
    (setf (loom-wallet-encrypted-wallet-string wallet)
          encrypted-wallet-string
          (fsdb:db-get db wallet-key $WALLET) encrypted-wallet-string)))

(defun loom-account-servers (db account-hash &optional include-wallets-p)
  (let ((server-key (loom-account-server-key account-hash))
        (res nil))
    (dolist (urlhash (fsdb:db-contents db server-key))
      (let ((url (loom-get-server-url db urlhash))
            (wallets (and include-wallets-p
                          (loom-account-wallets db account-hash urlhash))))
        (push (make-loom-server :url url
                                :urlhash urlhash
                                :wallets wallets)
              res)))
    res))

(defun loom-account-wallets (db account-hash urlhash)
  (let* ((server-key (loom-account-server-key account-hash))
         (walletname-key (fsdb:append-db-keys server-key urlhash $WALLETNAME))
         (wallet-key (fsdb:append-db-keys server-key urlhash $WALLET))
         (wallets nil))
    (dolist (namehash (fsdb:db-contents db walletname-key))
      (let ((name (fsdb:db-get db walletname-key namehash))
            (encrypted-passphrase
             (fsdb:db-get db wallet-key namehash $PASSPHRASE))
            (encrypted-wallet-string
             (fsdb:db-get db wallet-key namehash $WALLET))
            (private-p
             (fsdb:db-get db wallet-key namehash $PRIVATE)))
        (push (make-loom-wallet :name name
                                :urlhash urlhash
                                :namehash namehash
                                :encrypted-passphrase encrypted-passphrase
                                :encrypted-wallet-string encrypted-wallet-string
                                :private-p (not (null private-p)))
              wallets)))
    (sort wallets 'string-lessp :key #'loom-wallet-name)))

(defconstant $truledger-saved-servers "truledger-saved-servers")

;; Encrypted with passphrase:
;;   (
;;   :url-<urlhash>=<url>
;;   :wallet-<urlhash>-<namehash>=<name>
;;   :passphrase-<urlhash>-<namehash>=<wallet-passphrase>
;;   :private-<urlhash>-<namehash>=1
;;   ...
;;   )
(defun loom-encode-servers-for-save (account-passphrase servers passphrase)
  (let (alist)
    (dolist (server servers)
      (let ((urlhash (loom-server-urlhash server)))
        (push (cons (strcat "url-" urlhash)
                    (loom-server-url server))
              alist)
        (dolist (wallet (loom-server-wallets server))
          (let* ((namehash (loom-wallet-namehash wallet))
                 (urlhash-namehash (strcat urlhash "-" namehash)))
            (push (cons (strcat "wallet-" urlhash-namehash)
                        (loom-wallet-name wallet))
                  alist)
            (push (cons (strcat "passphrase-" urlhash-namehash)
                        (loom-wallet-passphrase wallet account-passphrase))
                  alist)
            (when (loom-wallet-private-p wallet)
              (push (cons (strcat "private-" urlhash-namehash) "1")
                    alist))))))
    (encrypt (loom:alist-to-kv-string (nreverse alist))
             passphrase)))

(defun loom-decode-servers-from-cipher-text
    (account-passphrase cipher-text passphrase)
  (let* ((kv (decrypt cipher-text passphrase))
         (alist (loom:parse-kv kv))
         (urls nil)
         (wallet-names (make-hash-table :test #'equal))
         (passphrases (make-hash-table :test #'equal))
         (privates (make-hash-table :test #'equal)))
    (labels ((hashes (str prefix)
               (apply #'values (split-sequence:split-sequence
                                #\- (subseq str (length prefix)))))
             (try (k v prefix hash)
               (when (eql 0 (search prefix k :test #'equal))
                 (multiple-value-bind (urlhash namehash) (hashes k prefix)
                   (push (cons namehash v) (gethash urlhash hash))
                   t))))
      (loop for (k . v) in alist
         do
           (cond ((eql 0 (search "url-" k :test #'equal))
                  (push (cons (subseq k 4) v) urls))
                 (t (or (try k v "wallet-" wallet-names)
                        (try k v "passphrase-" passphrases)
                        (try k v "private-" privates)
                        (error "Unknown key: ~s" k)))))
      (loop for (urlhash . url) in urls
         for wallets =
           (loop for (namehash . name) in (gethash urlhash wallet-names)
              for passphrase = (or (cdr (assocequal
                                         namehash (gethash urlhash passphrases)))
                                   (error "Missing passphrase."))
              for private = (cdr (assocequal namehash (gethash urlhash privates)))
              collect (make-loom-wallet
                       :name name
                       :namehash namehash
                       :urlhash urlhash
                       :encrypted-passphrase (encrypt passphrase account-passphrase)
                       :private-p (not (null private))))
         collect (make-loom-server :url url :urlhash urlhash :wallets wallets)))))

;; Returns three booleans:
;;   1) saving servers will change something
;;   2) saving servers will lose a passphrase
;;   2) restoring saved-servers will change something
(defun loom-compare-servers-to-saved (account-passphrase servers saved-servers)
  (multiple-value-bind (saving-changes-p saving-loses-p)
      (servers-change-saved-servers-p
       account-passphrase servers saved-servers)
    (values saving-changes-p saving-loses-p
            (saved-servers-change-servers-p
             account-passphrase servers saved-servers))))

;; Returns two booleans:
;;   1) saving servers will change something
;;   2) saving server will lose a passphrase
(defun servers-change-saved-servers-p (account-passphrase servers saved-servers)
  (when (set-difference saved-servers servers
                        :test #'equal :key #'loom-server-urlhash)
    (return-from servers-change-saved-servers-p (values t t)))
  (loop with change-p = (not (eql (length servers) (length saved-servers)))
     for server in servers
     for urlhash = (loom-server-urlhash server)
     for saved-server = (find urlhash saved-servers
                              :test #'equal :key #'loom-server-urlhash)
     do
       (if (not saved-server)
           (setf change-p t)
           (let* ((wallets (loom-server-wallets server))
                  (saved-wallets (loom-server-wallets saved-server))
                  (saved-passphrases
                   (loop for wallet in saved-wallets
                      collect (loom-wallet-passphrase
                               wallet account-passphrase))))
             (unless (eql (length wallets) (length saved-wallets))
               (setf change-p t))
             (loop for wallet in wallets
                for namehash = (loom-wallet-namehash wallet)
                for passphrase = (loom-wallet-passphrase wallet account-passphrase)
                for saved-wallet = (find namehash saved-wallets
                                         :test #'equal :key #'loom-wallet-namehash)
                do
                  (setf saved-passphrases
                        (delete passphrase saved-passphrases :test #'equal))
                  (if (not saved-wallet)
                      (setf change-p t)
                      (unless (equal passphrase
                                     (loom-wallet-passphrase
                                      saved-wallet account-passphrase))
                        (setf change-p t)))
                finally
                  (when saved-passphrases
                    (return-from servers-change-saved-servers-p
                      (values t t))))))
     finally
       (return (values change-p nil))))

(defun saved-servers-change-servers-p (account-passphrase servers saved-servers)
  (loop for saved-server in saved-servers
     for urlhash = (loom-server-urlhash saved-server)
     for server = (find urlhash servers
                        :test #'equal :key #'loom-server-urlhash)
     do
       (unless server (return t))
       (let ((saved-wallets (loom-server-wallets saved-server))
             (passphrases (loop for wallet in  (loom-server-wallets server)
                             collect (loom-wallet-passphrase
                                      wallet account-passphrase))))
         (loop for wallet in saved-wallets
            for passphrase = (loom-wallet-passphrase wallet account-passphrase)
            unless (member passphrase passphrases :test #'equal)
            do (return-from saved-servers-change-servers-p t)))))

(defmethod loom-save-wallets ((db fsdb:fsdb) account-passphrase urlhash namehash)
  (let* ((account-hash (loom-account-hash db account-passphrase))
         (servers (loom-account-servers db account-hash t))
         (save-server (or (find urlhash servers
                                :test #'equal :key #'loom-server-urlhash)
                          (error "Can't find save server.")))
         (save-wallet (or (and save-server
                               (find namehash (loom-server-wallets save-server)
                                     :test #'equal :key #'loom-wallet-namehash))
                          (error "Can't find save wallet"))))
    (let* ((loom-server (make-loom-uri-server db (loom-server-url save-server)))
           (passphrase (loom-wallet-passphrase save-wallet account-passphrase))
           (save-string (loom-encode-servers-for-save
                         account-passphrase servers passphrase))
           (private-p (loom-wallet-private-p save-wallet)))
      (loom:with-loom-transaction (:server loom-server)
        (let ((wallet (loom:get-wallet
                       passphrase t nil private-p)))
          (setf (loom:wallet-get-property wallet $truledger-saved-servers)
                save-string
                (loom:get-wallet passphrase t nil private-p) wallet))))))

(defmethod loom-load-saved-wallets
    ((db fsdb:fsdb) account-passphrase urlhash namehash)
  (let* ((account-hash (loom-account-hash db account-passphrase))
         (servers (loom-account-servers db account-hash t))
         (server (or (find urlhash servers :test #'equal :key #'loom-server-urlhash)
                     (error "Can't find load server.")))
         (wallet (or (find namehash (loom-server-wallets server)
                           :test #'equal :key #'loom-wallet-namehash)
                     (error "Can't find save wallet.")))
         (passphrase (loom-wallet-passphrase wallet account-passphrase))
         (private-p (loom-wallet-private-p wallet))
         (loom-server (make-loom-uri-server db (loom-server-url server))))
    (loom:with-loom-server (loom-server)
      (let* ((loom-wallet (loom:get-wallet passphrase t nil private-p))
             (cipher-text (or (loom:wallet-get-property
                               loom-wallet $truledger-saved-servers)
                              (error "No saved servers in Loom wallet."))))
        (values
         (loom-decode-servers-from-cipher-text
          account-passphrase cipher-text passphrase)
         servers)))))
        
(defun make-unique-wallet-name (name wallets)
  (loop for i from 1
     with res = name
     do
       (unless (find res wallets :test #'equal :key #'loom-wallet-name)
         (return res))
       (setf res (format nil "~a ~d" name i))))

(defmethod loom-restore-saved-wallets
    ((db fsdb:fsdb) account-passphrase urlhash namehash)
  (multiple-value-bind (saved-servers servers)
      (loom-load-saved-wallets db account-passphrase urlhash namehash)
    (loop for saved-server in saved-servers
       for url = (loom-server-url saved-server)
       for urlhash = (loom-server-urlhash saved-server)
       for server = (find urlhash servers :test #'equal :key #'loom-server-urlhash)
       for wallets = (and server (loom-server-wallets server))
       for passphrases = (loop for wallet in wallets
                            collect (loom-wallet-passphrase
                                     wallet account-passphrase))
       do
         (loop for wallet in (loom-server-wallets saved-server)
            for name = (loom-wallet-name wallet)
            for passphrase = (loom-wallet-passphrase
                              wallet account-passphrase)
            for private-p = (loom-wallet-private-p wallet)
            unless (member passphrase passphrases :test #'equal)
            do
              (let ((name (make-unique-wallet-name name wallets)))
                (add-loom-wallet
                 db account-passphrase url name passphrase private-p))))))

(defmethod loom-remove-saved-wallets
    ((db fsdb) account-passphrase urlhash namehash)
  (let* ((account-hash (loom-account-hash db account-passphrase))
         (servers (loom-account-servers db account-hash t))
         (server (or (find urlhash servers :test #'equal :key #'loom-server-urlhash)
                     (error "Can't find load server.")))
         (wallet (or (find namehash (loom-server-wallets server)
                           :test #'equal :key #'loom-wallet-namehash)
                     (error "Can't find save wallet.")))
         (passphrase (loom-wallet-passphrase wallet account-passphrase))
         (private-p (loom-wallet-private-p wallet))
         (loom-server (make-loom-uri-server db (loom-server-url server))))
    (loom:with-loom-server (loom-server)
      (let* ((loom-wallet (loom:get-wallet passphrase t nil private-p)))
        (setf (loom:wallet-get-property loom-wallet $truledger-saved-servers) nil)
        (setf (loom:get-wallet passphrase t nil private-p) loom-wallet)))))

(defun loom-rename-wallet (db passphrase urlhash namehash new-wallet-name)
  (let* ((account-hash (loom-account-hash db passphrase))
         (wallets (loom-account-wallets db account-hash urlhash))
         (wallet (find namehash wallets :test #'equal :key #'loom-wallet-namehash))
         (new-wallet (find new-wallet-name wallets
                           :test #'equal :key #'loom-wallet-name)))
    (unless wallet (error "No such wallet."))
    (when new-wallet (error "There is already a wallet with that name."))
    (let* ((url (loom-get-server-url db urlhash))
           (loom-server (make-loom-uri-server db url)))
      (loom:with-loom-transaction (:server loom-server)
        (let* ((wallet-passphrase (loom-wallet-passphrase wallet passphrase))
               (private-p (loom-wallet-private-p wallet))
               (loom-wallet (loom:get-wallet wallet-passphrase t nil private-p))
               (locations (loom:wallet-locations loom-wallet))
               (location (find-if #'loom:location-wallet-p locations))
               (new-location (find new-wallet-name locations
                                   :test #'equal :key #'loom:location-name)))
          (when new-location
            (error "There is already a Loom contact with that name."))
          (setf (loom:location-name location) new-wallet-name
                (loom:get-wallet wallet-passphrase t nil private-p) loom-wallet)
          (let* ((server-key (loom-account-server-key account-hash urlhash))
                 (old-file (fsdb:db-filename
                            db (fsdb:append-db-keys server-key $WALLET namehash)))
                 (old-name-file (fsdb:db-filename
                                 db (fsdb:append-db-keys
                                     server-key $WALLETNAME namehash)))
                 (new-namehash (folded-hash new-wallet-name))
                 (new-file (fsdb:db-filename
                            db (fsdb:append-db-keys
                                server-key $WALLET new-namehash)))
                 (new-name-key (fsdb:append-db-keys
                                server-key $WALLETNAME new-namehash))
                 (new-name-file (fsdb:db-filename db new-name-key)))
            (rename-file old-file new-file)
            (rename-file old-name-file new-name-file)
            (setf (fsdb:db-get db new-name-key) new-wallet-name)
            (when (equal namehash (loom-namehash-preference
                                   db account-hash urlhash))
              (setf (loom-namehash-preference db account-hash urlhash)
                    new-namehash))))))))

(defun loom-remove-wallet (db account-hash urlhash namehash)
  (let* ((server-key (loom-account-server-key account-hash urlhash))
         (wallet-key (fsdb:append-db-keys server-key $WALLET namehash))
         (walletname-key (fsdb:append-db-keys server-key $WALLETNAME namehash)))
    (setf (fsdb:db-get db walletname-key) nil)
    (fsdb:recursive-delete-directory (fsdb:db-filename db wallet-key)
                                     :if-does-not-exist nil)
    (when (equal namehash (loom-namehash-preference db account-hash urlhash))
      (setf (loom-namehash-preference db account-hash urlhash) nil))))

(defun find-unique-string (prefix strings)
  (loop with s = prefix
     for suffix from 2
     do (unless (member s strings :test #'equal) (return s))
       (setf s (format nil "~a ~d" prefix suffix))))

(defun loom-merge-wallet-locations-and-assets (wallet merge-wallet)
  (check-type wallet loom:wallet)
  (check-type merge-wallet loom:wallet)
  (let* ((merge-locations (loom:wallet-locations merge-wallet))
         (merge-assets (loom:wallet-assets merge-wallet))
         (location-names (mapcar 'loom:location-name merge-locations))
         (asset-names (mapcar 'loom:asset-name merge-assets))
        new-locations new-assets)
    (dolist (location (loom:wallet-locations wallet))
      (unless (or (loom:location-wallet-p location)
                  (loom:find-location-by-loc
                   (loom:location-loc location) merge-locations))
        (setf (loom:location-name location)
              (find-unique-string (loom:location-name location) location-names))
        (push location new-locations)))
    (dolist (asset (loom:wallet-assets wallet))
      (unless (loom:find-asset-by-id (loom:asset-id asset) merge-assets)
        (setf (loom:asset-name asset)
              (find-unique-string (loom:asset-name asset) asset-names))
        (push asset new-assets)))
    (setf (loom:wallet-locations merge-wallet)
          (nconc (loom:wallet-locations merge-wallet) (nreverse new-locations)))
    (setf (loom:wallet-assets merge-wallet)
          (nconc (loom:wallet-assets merge-wallet) (nreverse new-assets)))
    merge-wallet))

;; This doesn't go through all the saved servers in all the wallets,
;; just the wallet being deleted and the one being merged into.
;; Maybe it should remove the deleted wallet from all saved servers in all wallets.
(defun loom-merge-wallet-saved-servers
    (account-passphrase urlhash wallet merge-wallet &key
     (passphrase (loom-wallet-passphrase wallet account-passphrase))
     (merge-passphrase (loom-wallet-passphrase merge-wallet account-passphrase)))
  (check-type wallet loom:wallet)
  (check-type passphrase string)
  (check-type merge-wallet loom:wallet)
  (check-type merge-passphrase string)
  (let* ((cipher-text
          (loom:wallet-get-property wallet $truledger-saved-servers))
         (servers (and cipher-text
                       (loom-decode-servers-from-cipher-text
                        account-passphrase cipher-text passphrase)))
         (merge-cipher-text
          (loom:wallet-get-property merge-wallet $truledger-saved-servers))
         (merge-servers
          (and merge-cipher-text
               (loom-decode-servers-from-cipher-text
                account-passphrase merge-cipher-text merge-passphrase)))
         new-servers)
    (when servers
      (loop for server in servers
         for merge-server = (find (loom-server-urlhash server) merge-servers
                                  :test #'equal :key #'loom-server-urlhash)
         with wallet-names
         for passphrases = (and merge-server
                                (loop for wallet in (loom-server-wallets
                                                     merge-server)
                                   for pass = (loom-wallet-passphrase
                                               wallet account-passphrase)
                                   collect pass
                                   do
                                     (push (loom-wallet-name wallet) wallet-names)))
         for new-wallets = nil
         do
           (cond (merge-server
                  (loop for wallet in (loom-server-wallets server)
                     for pass = (loom-wallet-passphrase wallet account-passphrase)
                     do
                       (unless (or (equal pass passphrase)
                                   (member (loom-wallet-passphrase
                                            wallet account-passphrase)
                                           passphrases
                                           :test #'equal))
                         (setf (loom-wallet-name wallet)
                               (find-unique-string (loom-wallet-name wallet)
                                                   wallet-names))
                         (push wallet new-wallets)))
                  (setf (loom-server-wallets merge-server)
                        (nconc (loom-server-wallets merge-server)
                               (nreverse new-wallets))))
                 (t (push server new-servers))))
      (setf merge-servers
            (nconc merge-servers (nreverse new-servers))))
    (when merge-servers
      ;; Don't save wallet we're deleting
      (let ((server (find urlhash merge-servers
                          :test #'equal :key #'loom-server-urlhash)))
        (when server
          (let* ((wallets (loom-server-wallets server))
                 (deleted-wallet (loop for wallet in wallets
                                    when (equal passphrase
                                                (loom-wallet-passphrase
                                                 wallet account-passphrase))
                                    do
                                      (return wallet))))
            (when deleted-wallet
              (setf (loom-server-wallets server)
                    (delete deleted-wallet wallets))))))
      (setf (loom:wallet-get-property merge-wallet $truledger-saved-servers)
            (loom-encode-servers-for-save
             account-passphrase merge-servers merge-passphrase))
      t)))

(defun loom-move-wallet-quantities (wallet merge-wallet)
  (let* ((wallet-loc (loom:location-loc
                      (find-if #'loom:location-wallet-p
                               (loom:wallet-locations wallet))))
         (merge-loc (loom:location-loc
                     (find-if #'loom:location-wallet-p
                              (loom:wallet-locations merge-wallet))))
         (asset-ids (mapcar #'loom:asset-id (loom:wallet-assets wallet)))
         (id.qtys (cdar (loom:grid-scan-wallet
                         nil :locations (list wallet-loc) :assets asset-ids))))
    (loop for (id . qty) in id.qtys
       do
         (unless (equal id loom:*zero*)
           (loom:grid-buy id merge-loc merge-loc))
         (if (eql #\- (aref qty 0))
             (loom:grid-issuer id wallet-loc merge-loc)
             (loom:grid-move id (parse-integer qty) wallet-loc merge-loc))
         (loom:grid-sell id wallet-loc merge-loc t))))

(defun loom-merge-wallet (db passphrase urlhash namehash mergehash)
  "Merge the wallet at urlhash/namehash into the one at urlhash/mergehash."
  (let* ((account-hash (loom-account-hash db passphrase))
         (wallets (loom-account-wallets db account-hash urlhash))
         (wallet (find namehash wallets :test #'equal :key #'loom-wallet-namehash))
         (merge-wallet (find mergehash wallets
                             :test #'equal :key #'loom-wallet-namehash)))
    (unless wallet (error "Can't find wallet."))
    (unless merge-wallet (error "Can't find merge wallet."))
    (let* ((url (loom-get-server-url db urlhash))
           (loom-server (make-loom-uri-server db url))
           (wallet-passphrase (loom-wallet-passphrase wallet passphrase))
           (wallet-private-p (loom-wallet-private-p wallet))
           (merge-wallet-passphrase (loom-wallet-passphrase merge-wallet passphrase))
           (merge-wallet-private-p (loom-wallet-private-p merge-wallet)))
      (loom:with-loom-transaction (:server loom-server)
        (let ((loom-wallet
               (loom:get-wallet wallet-passphrase t nil wallet-private-p))
              (loom-merge-wallet
               (loom:get-wallet
                merge-wallet-passphrase t nil merge-wallet-private-p)))
          ;; Need to delete before we move, to recover the usage tokens
          ;; for the old wallet. All inside a transaction, so will undo
          ;; if something fails.
          (loom:delete-wallet wallet-passphrase merge-wallet-passphrase
                              :location-is-passphrase-p t
                              :usage-is-passphrase-p t
                              :private-p wallet-private-p
                              :usage-private-p merge-wallet-private-p)
          (loom-merge-wallet-locations-and-assets loom-wallet loom-merge-wallet)
          (loom-merge-wallet-saved-servers
           passphrase urlhash loom-wallet loom-merge-wallet
           :passphrase wallet-passphrase
           :merge-passphrase merge-wallet-passphrase)
          (setf (loom:get-wallet
                 merge-wallet-passphrase t nil merge-wallet-private-p)
                loom-merge-wallet)
          (loom-move-wallet-quantities loom-wallet loom-merge-wallet)
          (loom-remove-wallet db account-hash urlhash namehash))))))
        
;;
;; Loom session stuff
;;

(defmethod loom-login-with-sessionid ((db fsdb:fsdb) sessionid)
  (session-passphrase db sessionid))
  
(defmethod loom-login-new-session ((db fsdb:fsdb) passphrase)
  "Check for existing loom servers for passphrase, create a new session, and return a sessionid."
  (let ((account-hash (loom-account-hash db passphrase)))
    (unless (loom-urlhash-preference db account-hash)
      (error "No loom account for that passphrase.")))
  (loom-make-session db passphrase))

(defun loom-account-session-key (account-hash)
  (fsdb:append-db-keys (loom-account-key account-hash) $SESSION))

(defvar *ssl-certificates-initialized-p* nil)

(defvar *ssl-certificates-dir*
  "ssl-certificates")

(defun ssl-certificates-dir ()
  (let ((dir *ssl-certificates-dir*))
    (if (functionp dir) (funcall dir) dir)))

(defun (setf ssl-certificates-dir) (dir)
  (setf *ssl-certificates-dir* dir))

(defun initialize-ssl-certificates (&optional (db (make-client-db)))
  (unless *ssl-certificates-initialized-p*
    (setf (loom:ssl-certificate-temp-dir) (fsdb:db-filename db "/"))
    (let ((files (directory
                  (fsdb:append-db-keys (ssl-certificates-dir) "*.pem"))))
      (when files
        (cl+ssl:ssl-verify-init :verify-locations files)))
    (setf *ssl-certificates-initialized-p* t)))

(defun make-loom-uri-server (db uri-string)
  (initialize-ssl-certificates db)
  (loom:make-loom-uri-server uri-string))

(defmethod loom-make-session ((db fsdb:fsdb) passphrase)
  "Create a new loom user session, encoding $passphrase with a new session id.
   Return the new session id.
   If the user already has a session stored with another session id,
   remove that one first."
  (let* ((sessionid (newsessionid))
         (passcrypt (xorcrypt sessionid passphrase))
         (account-hash (loom-account-hash db passphrase))
         (loom-session-key (loom-account-session-key account-hash)))
    (with-db-lock (db loom-session-key)
      (let ((oldhash (db-get db loom-session-key)))
        (when oldhash
          (setf (db-get db (sessionkey oldhash)) nil)))
      (let ((newhash (sha1 sessionid)))
        (setf (db-get db (sessionkey newhash)) passcrypt
              (db-get db loom-session-key) newhash)))
    sessionid))

(defmethod loom-remove-session ((db fsdb:fsdb) account-hash)
  "Remove the current user's session"
  (let* ((loom-session-key (loom-account-session-key account-hash)))
    (with-db-lock (db loom-session-key)
      (let ((oldhash (db-get db loom-session-key)))
        (when oldhash
          (setf (db-get db (sessionkey oldhash)) nil
                (db-get db loom-session-key) nil))))))

(defmethod loom-logout ((db fsdb:fsdb) account-hash)
  (loom-remove-session db account-hash))
*/
	
}
